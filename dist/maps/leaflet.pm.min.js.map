{"version":3,"sources":["leaflet.pm.js","Drag.js","Overlap.js","Snapping.js","L.PM.js","L.PM.Map.js","L.PM.Draw.js","L.PM.Edit.js","Draw/L.PM.Draw.Line.js","Draw/L.PM.Draw.Marker.js","Draw/L.PM.Draw.Poly.js","Edit/L.PM.Edit.LayerGroup.js","Edit/L.PM.Edit.Line.js","Edit/L.PM.Edit.Marker.js","Edit/L.PM.Edit.Poly.js","Toolbar/L.Controls.js","Toolbar/L.PM.Toolbar.js"],"names":["DragMixin","_initDraggableLayer","_this","this","_tempDragCoord","el","_layer","_path","L","DomUtil","addClass","onMouseUp","_map","dragging","enable","off","_dragging","_initMarkers","window","setTimeout","removeClass","fire","_fireEdit","onMouseMove","e","bringToFront","disable","_markerGroup","clearLayers","_onLayerDrag","on","latlng","deltaLatLng","lat","lng","coords","Polygon","_latlngs","newLatLngs","map","currentLatLng","setLatLngs","redraw","_deltaLatLng","OverlapMixin","_applyPossibleCoordsChanges","_tempPolygon","latlngs","getLayers","getLatLngs","_poly","_drawTemporaryPolygon","geoJson","setStyle","opacity","fillOpacity","addTo","bringToBack","_handleOverlap","mainPoly","layers","_layerGroup","changed","resultingGeoJson","toGeoJSON","filter","layer","Object","is","intersect","turf","console","warn","difference","geometry","type","remove","SnapMixin","_initSnappableMarkers","options","snapDistance","_markers","forEach","marker","_handleSnapping","_cleanupSnapping","_unsnap","_snapLatLng","_snapList","debugIndicatorLines","line","originalEvent","altKey","undefined","_createSnapList","length","target","closestLayer","_calcClosestLayer","getLatLng","isMarker","Marker","snapLatLng","_checkPrioritiySnapping","minDistance","eventInfo","segment","layerInteractedWith","distance","setLatLng","_onMarkerDrag","A","B","C","distanceAC","_getDistance","distanceBC","closestVertexLatLng","shortestDistance","priorityDistance","snapLatlng","_this2","eachLayer","Polyline","push","debugLine","polyline","color","_latlng","_pmTempLayer","_this3","index","results","_calcLayerDistances","_this4","isPolygon","isPolyline","P","closestSegment","coord","nextIndex","_getDistanceToSegment","_getClosestPointOnSegment","latlngA","latlngB","maxzoom","getMaxZoom","Infinity","getZoom","project","closest","LineUtil","closestPointOnSegment","unproject","latLngToLayerPoint","pointToSegmentDistance","distanceTo","PM","initialize","addInitHooks","initLayerGroup","pm","Edit","LayerGroup","initMarker","initPolygon","Poly","initPolyline","Line","initMap","Map","addInitHook","Class","extend","Draw","Toolbar","addControls","enableDraw","shape","arguments","disableDraw","setPathOptions","removeLayer","_layers","toggleRemoval","enabled","globalEditEnabled","_globalEditMode","toggleGlobalEditMode","templineStyle","hintlineStyle","dashArray","shapes","pathOptions","getShapes","Error","join","addButton","includes","_shape","toolbarButtonName","Util","setOptions","_enabled","_polyline","addLayer","_hintline","_container","style","cursor","_createPolygonPoint","_syncHintLine","toggleButton","toggle","polyPoints","lastPolygonPoint","first","addLatLng","_createMarker","_finishShape","polylineLayer","draggable","icon","divIcon","className","polygonLayer","polygon","layerGroup","findLayers","_initLayer","getOptions","availableEvents","event","_fireEvent","fireEvent","toggleEdit","_options","find","poly","k","_createMiddleMarker","snappable","_origLatLng","_index","_onMarkerDragStart","_onMarkerDragEnd","_removeMarker","leftM","rightM","_calcMiddleLatLng","middleMarker","middleIcon","setIcon","_middleMarkerNext","_middleMarkerPrev","_addMarker","newM","splice","i","leftMarkerIndex","rightMarkerIndex","m","nextMarkerIndex","prevMarkerIndex","markerLatLng","prevMarkerLatLng","nextMarkerLatLng","middleMarkerNextLatLng","middleMarkerPrevLatLng","markerEvent","edited","latlng1","latlng2","p1","p2","_add","_divideBy","_onDragEnd","Control","PMButton","position","_button","onAdd","container","buttonsDomNode","_makeButton","appendChild","onRemove","getText","text","getIconUrl","iconUrl","destroy","_update","toggleStatus","_applyStyleClasses","toggled","onCreate","_triggerClick","onClick","_clicked","afterClick","button","newButton","create","image","setAttribute","DomEvent","addListener","disableOtherButtons","triggerClickOnToggledButtons","disableClickPropagation","doToggle","drawMarker","drawPolygon","drawPolyline","editPolygon","dragPolygon","deleteLayer","buttons","_defineButtons","getButtons","_showHideButtons","_addButton","name","exceptThisButton","status","deleteButton","drawPolyButton","drawMarkerButton","drawLineButton","editButton","dragButton","btn","setPosition"],"mappings":"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","file":"../leaflet.pm.min.js","sourcesContent":["'use strict';\n\nvar DragMixin = {\n    _initDraggableLayer: function _initDraggableLayer() {\n        var _this = this;\n\n        // temporary coord variable for delta calculation\n        this._tempDragCoord = null;\n\n        // add CSS class\n        var el = this._layer._path;\n        L.DomUtil.addClass(el, 'leaflet-pm-draggable');\n\n        var onMouseUp = function onMouseUp() {\n            // re-enable map drag\n            _this._layer._map.dragging.enable();\n\n            // clear up mousemove event\n            _this._layer._map.off('mousemove');\n\n            // clear up mouseup event\n            _this._layer.off('mouseup');\n\n            // if no drag happened, don't do anything\n            if (!_this._dragging) {\n                return false;\n            }\n\n            // show markers again\n            _this._initMarkers();\n\n            // timeout to prevent click event after drag :-/\n            // TODO: do it better as soon as leaflet has a way to do it better :-)\n            window.setTimeout(function () {\n                // set state\n                _this._dragging = false;\n                L.DomUtil.removeClass(el, 'leaflet-pm-dragging');\n\n                // fire pm:dragend event\n                _this._layer.fire('pm:dragend');\n\n                // fire edit\n                _this._fireEdit();\n            }, 10);\n\n            return true;\n        };\n\n        var onMouseMove = function onMouseMove(e) {\n            if (!_this._dragging) {\n                // set state\n                _this._dragging = true;\n                L.DomUtil.addClass(el, 'leaflet-pm-dragging');\n\n                // bring it to front to prevent drag interception\n                _this._layer.bringToFront();\n\n                // disbale map drag\n                _this._layer._map.dragging.disable();\n\n                // hide markers\n                _this._markerGroup.clearLayers();\n\n                // fire pm:dragstart event\n                _this._layer.fire('pm:dragstart');\n            }\n\n            _this._onLayerDrag(e);\n        };\n\n        this._layer.on('mousedown', function (e) {\n            // save for delta calculation\n            _this._tempDragCoord = e.latlng;\n\n            _this._layer.on('mouseup', onMouseUp);\n\n            // listen to mousemove on map (instead of polygon),\n            // otherwise fast mouse movements stop the drag\n            _this._layer._map.on('mousemove', onMouseMove);\n        });\n    },\n    dragging: function dragging() {\n        return this._dragging;\n    },\n    _onLayerDrag: function _onLayerDrag(e) {\n        // latLng of mouse event\n        var latlng = e.latlng;\n\n        // delta coords (how far was dragged)\n        var deltaLatLng = {\n            lat: latlng.lat - this._tempDragCoord.lat,\n            lng: latlng.lng - this._tempDragCoord.lng\n        };\n\n        // create the new coordinates array\n        var coords = void 0;\n\n        if (this._layer instanceof L.Polygon) {\n            coords = this._layer._latlngs[0];\n        } else {\n            coords = this._layer._latlngs;\n        }\n\n        var newLatLngs = coords.map(function (currentLatLng) {\n            return {\n                lat: currentLatLng.lat + deltaLatLng.lat,\n                lng: currentLatLng.lng + deltaLatLng.lng\n            };\n        });\n\n        // set new coordinates and redraw\n        this._layer.setLatLngs(newLatLngs).redraw();\n\n        // save current latlng for next delta calculation\n        this._tempDragCoord = latlng;\n        this._deltaLatLng = deltaLatLng;\n\n        // fire pm:dragstart event\n        this._layer.fire('pm:drag');\n    }\n};\n'use strict';\n\n// this isn't included anymore but if you want to re-enable it:\n// 1. include this mixing inside L.PM.Edit.js\n// 2. include the turf.js dependency in your project before leaflet.pm\n// 3. uncomment all code inside L.PM.Edit.Poly that has an if-check on options.preventOverlap\n// 4. pass the option preventOverlap to the enable() function on your layer\nvar OverlapMixin = {\n    _applyPossibleCoordsChanges: function _applyPossibleCoordsChanges() {\n        // after the polygon was dragged and changed it's shape because of unallowed intersecting\n        // with another polygon, this function takes the temporarily drawn polygon (during drag) and applies\n        // it's coordinates to our main polygon\n\n        if (this._tempPolygon) {\n            // get the new coordinates\n            var latlngs = this._tempPolygon.getLayers()[0].getLatLngs();\n\n            // reshape our main polygon\n            this._poly.setLatLngs(latlngs).redraw();\n\n            // initialize the markers again\n            this._initMarkers();\n        }\n    },\n    _drawTemporaryPolygon: function _drawTemporaryPolygon(geoJson) {\n        // hide our polygon\n        this._poly.setStyle({ opacity: 0, fillOpacity: 0 });\n\n        // draw a temporary polygon (happens during drag & intersection)\n        this._tempPolygon = L.geoJson(geoJson).addTo(this._poly._map).bringToBack();\n    },\n    _handleOverlap: function _handleOverlap() {\n        var mainPoly = this._poly;\n        var layers = this._layerGroup.getLayers();\n        var changed = false;\n        var resultingGeoJson = this._poly.toGeoJSON();\n\n        layers.filter(function (layer) {\n            return !Object.is(layer, mainPoly);\n        }).map(function (layer) {\n            var intersect = void 0;\n\n            // this needs to be in a try catch block because turf isn't reliable\n            // it throws self-intersection errors even if there are none\n            try {\n                intersect = turf.intersect(resultingGeoJson, layer.toGeoJSON());\n            } catch (e) {\n                console.warn('Turf Error.');\n            }\n\n            if (intersect) {\n                resultingGeoJson = turf.difference(resultingGeoJson, layer.toGeoJSON());\n\n                // if the resulting polygon is a MultiPolygon, don't handle it.\n                if (resultingGeoJson.geometry.type !== 'MultiPolygon') {\n                    changed = true;\n                }\n            }\n\n            return true;\n        });\n\n        if (this._tempPolygon) {\n            this._tempPolygon.remove();\n            delete this._tempPolygon;\n        }\n\n        if (changed) {\n            this._drawTemporaryPolygon(resultingGeoJson);\n        } else {\n            this._poly.setStyle({ opacity: 1, fillOpacity: 0.2 });\n        }\n    }\n};\n'use strict';\n\nvar SnapMixin = {\n    _initSnappableMarkers: function _initSnappableMarkers() {\n        var _this = this;\n\n        this.options.snapDistance = this.options.snapDistance || 30;\n\n        this._markers.forEach(function (marker) {\n            marker.off('drag', _this._handleSnapping, _this);\n            marker.on('drag', _this._handleSnapping, _this);\n\n            marker.off('dragend', _this._cleanupSnapping, _this);\n            marker.on('dragend', _this._cleanupSnapping, _this);\n        });\n\n        this._layer.off('pm:dragstart', this._unsnap, this);\n        this._layer.on('pm:dragstart', this._unsnap, this);\n    },\n    _unsnap: function _unsnap() {\n        // delete the last snap\n        delete this._snapLatLng;\n    },\n    _cleanupSnapping: function _cleanupSnapping() {\n        // delete it, we need to refresh this with each start of a drag because\n        // meanwhile, new layers could've been added to the map\n        delete this._snapList;\n\n        this.debugIndicatorLines.forEach(function (line) {\n            line.remove();\n        });\n    },\n    _handleSnapping: function _handleSnapping(e) {\n        // if snapping is disabled via holding ALT during drag, stop right here\n        if (e.originalEvent.altKey) {\n            return false;\n        }\n\n        // create a list of polygons that the marker could snap to\n        // this isn't inside a movestart/dragstart callback because middlemarkers are initialized\n        // after dragstart/movestart so it wouldn't fire for them\n        if (this._snapList === undefined) {\n            this._createSnapList(e);\n        }\n\n        // if there are no layers to snap to, stop here\n        if (this._snapList.length <= 0) {\n            return false;\n        }\n\n        var marker = e.target;\n\n        // get the closest layer, it's closest latlng, segment and the distance\n        var closestLayer = this._calcClosestLayer(marker.getLatLng(), this._snapList);\n\n        var isMarker = closestLayer.layer instanceof L.Marker;\n\n        // find the final latlng that we want to snap to\n        var snapLatLng = void 0;\n        if (!isMarker) {\n            snapLatLng = this._checkPrioritiySnapping(closestLayer);\n        } else {\n            snapLatLng = closestLayer.latlng;\n        }\n\n        // minimal distance before marker snaps (in pixels)\n        var minDistance = this.options.snapDistance;\n\n        // event info for pm:snap and pm:unsnap\n        var eventInfo = {\n            marker: marker,\n            snapLatLng: snapLatLng,\n            segment: closestLayer.segment,\n            layer: this._layer,\n            layerInteractedWith: closestLayer.layer };\n\n        if (closestLayer.distance < minDistance) {\n            // snap the marker\n            marker.setLatLng(snapLatLng);\n\n            // fire onMarkerDrag for pmEditMarkers (vertex markers on polylines/polygons)\n            // TODO: think about how to move this into L.PM.Edit.Line.js, so Snapping.js is\n            // generic for Edit.Marker and Edit.Line\n            if (!(this._layer instanceof L.Marker)) {\n                this._onMarkerDrag(e);\n            }\n\n            // check if the snapping position differs from the last snap\n            if (this._snapLatLng !== snapLatLng) {\n                // if yes, save it and fire the pm:snap event\n                this._snapLatLng = snapLatLng;\n                marker.fire('pm:snap', eventInfo);\n                this._layer.fire('pm:snap', eventInfo);\n            }\n        } else if (this._snapLatLng) {\n            // no more snapping\n\n            // if it was previously snapped...\n            // ...unsnap\n            this._unsnap(eventInfo);\n\n            // and fire unsnap event\n            eventInfo.marker.fire('pm:unsnap', eventInfo);\n            this._layer.fire('pm:unsnap', eventInfo);\n        }\n\n        return true;\n    },\n\n\n    // we got the point we want to snap to (C), but we need to check if a coord of the polygon\n    // receives priority over C as the snapping point. Let's check this here\n    _checkPrioritiySnapping: function _checkPrioritiySnapping(closestLayer) {\n        var map = this._layer._map;\n\n        // A and B are the points of the closest segment to P (the marker position we want to snap)\n        var A = closestLayer.segment[0];\n        var B = closestLayer.segment[1];\n\n        // C is the point we would snap to on the segment.\n        // The closest point on the closest segment of the closest polygon to P. That's right.\n        var C = closestLayer.latlng;\n\n        // distances from A to C and B to C to check which one is closer to C\n        var distanceAC = this._getDistance(map, A, C);\n        var distanceBC = this._getDistance(map, B, C);\n\n        // closest latlng of A and B to C\n        var closestVertexLatLng = distanceAC < distanceBC ? A : B;\n\n        // distance between closestVertexLatLng and C\n        var shortestDistance = distanceAC < distanceBC ? distanceAC : distanceBC;\n\n        // the distance that needs to be undercut to trigger priority\n        var priorityDistance = this.options.snapDistance;\n\n        // the latlng we ultemately want to snap to\n        var snapLatlng = void 0;\n\n        // if C is closer to the closestVertexLatLng (A or B) than the snapDistance,\n        // the closestVertexLatLng has priority over C as the snapping point.\n        if (shortestDistance < priorityDistance) {\n            snapLatlng = closestVertexLatLng;\n        } else {\n            snapLatlng = closestLayer.latlng;\n        }\n\n        // return the snapping point\n        return snapLatlng;\n    },\n    _createSnapList: function _createSnapList() {\n        var _this2 = this;\n\n        var layers = [];\n        var debugIndicatorLines = [];\n\n        // find all layers that are or inherit from Polylines... and markers that are not\n        // temporary markers of polygon-edits\n        this._layer._map.eachLayer(function (layer) {\n            if (layer instanceof L.Polyline || layer instanceof L.Marker) {\n                layers.push(layer);\n\n                // this is for debugging\n                var debugLine = L.polyline([], { color: 'red' });\n                debugIndicatorLines.push(debugLine);\n\n                // uncomment 👇 this line to show helper lines for debugging\n                // debugLine.addTo(this._layer._map);\n            }\n        });\n\n        // ...except myself\n        layers = layers.filter(function (layer) {\n            return _this2._layer !== layer;\n        });\n\n        // also remove everything that has no coordinates yet\n        layers = layers.filter(function (layer) {\n            return layer._latlng || layer._latlngs.length > 0;\n        });\n\n        // finally remove everything that's leaflet.pm specific temporary stuff\n        layers = layers.filter(function (layer) {\n            return !layer._pmTempLayer;\n        });\n\n        this._snapList = layers;\n        this.debugIndicatorLines = debugIndicatorLines;\n    },\n    _calcClosestLayer: function _calcClosestLayer(latlng, layers) {\n        var _this3 = this;\n\n        // the closest polygon to our dragged marker latlng\n        var closestLayer = {};\n\n        // loop through the layers\n        layers.forEach(function (layer, index) {\n            // find the closest latlng, segment and the distance of this layer to the dragged marker latlng\n            var results = _this3._calcLayerDistances(latlng, layer);\n\n            // show indicator lines, it's for debugging\n            _this3.debugIndicatorLines[index].setLatLngs([latlng, results.latlng]);\n\n            // save the info if it doesn't exist or if the distance is smaller than the previous one\n            if (closestLayer.distance === undefined || results.distance < closestLayer.distance) {\n                closestLayer = results;\n                closestLayer.layer = layer;\n            }\n        });\n\n        // return the closest layer and it's data\n        // if there is no closest layer, return undefined\n        return closestLayer;\n    },\n    _calcLayerDistances: function _calcLayerDistances(latlng, layer) {\n        var _this4 = this;\n\n        var map = this._layer._map;\n\n        // is this a polyline, marker or polygon?\n        var isPolygon = layer instanceof L.Polygon;\n        var isPolyline = !(layer instanceof L.Polygon) && layer instanceof L.Polyline;\n        var isMarker = layer instanceof L.Marker;\n\n        // the point P which we want to snap (probpably the marker that is dragged)\n        var P = latlng;\n\n        var coords = void 0;\n\n        // the coords of the layer\n        if (isPolygon) {\n            // polygon\n            coords = layer.getLatLngs()[0];\n        } else if (isPolyline) {\n            // polyline\n            coords = layer.getLatLngs();\n        } else if (isMarker) {\n            // marker\n            coords = layer.getLatLng();\n\n            // return the info for the marker, no more calculations needed\n            return {\n                latlng: coords,\n                distance: this._getDistance(map, coords, P)\n            };\n        }\n\n        // the closest segment (line between two points) of the layer\n        var closestSegment = void 0;\n\n        // the shortest distance from P to closestSegment\n        var shortestDistance = void 0;\n\n        // loop through the coords of the layer\n        coords.forEach(function (coord, index) {\n            // take this coord (A)...\n            var A = coord;\n            var nextIndex = void 0;\n\n            // and the next coord (B) as points\n            if (isPolygon) {\n                nextIndex = index + 1 === coords.length ? 0 : index + 1;\n            } else {\n                nextIndex = index + 1 === coords.length ? undefined : index + 1;\n            }\n\n            var B = coords[nextIndex];\n\n            if (B) {\n                // calc the distance between P and AB-segment\n                var distance = _this4._getDistanceToSegment(map, P, A, B);\n\n                // is the distance shorter than the previous one? Save it and the segment\n                if (shortestDistance === undefined || distance < shortestDistance) {\n                    shortestDistance = distance;\n                    closestSegment = [A, B];\n                }\n            }\n\n            return true;\n        });\n\n        // now, take the closest segment (closestSegment) and calc the closest point to P on it.\n        var C = this._getClosestPointOnSegment(map, latlng, closestSegment[0], closestSegment[1]);\n\n        // return the latlng of that sucker\n        return {\n            latlng: C,\n            segment: closestSegment,\n            distance: shortestDistance\n        };\n    },\n    _getClosestPointOnSegment: function _getClosestPointOnSegment(map, latlng, latlngA, latlngB) {\n        var maxzoom = map.getMaxZoom();\n        if (maxzoom === Infinity) {\n            maxzoom = map.getZoom();\n        }\n        var P = map.project(latlng, maxzoom);\n        var A = map.project(latlngA, maxzoom);\n        var B = map.project(latlngB, maxzoom);\n        var closest = L.LineUtil.closestPointOnSegment(P, A, B);\n        return map.unproject(closest, maxzoom);\n    },\n    _getDistanceToSegment: function _getDistanceToSegment(map, latlng, latlngA, latlngB) {\n        var P = map.latLngToLayerPoint(latlng);\n        var A = map.latLngToLayerPoint(latlngA);\n        var B = map.latLngToLayerPoint(latlngB);\n        return L.LineUtil.pointToSegmentDistance(P, A, B);\n    },\n    _getDistance: function _getDistance(map, latlngA, latlngB) {\n        return map.latLngToLayerPoint(latlngA).distanceTo(map.latLngToLayerPoint(latlngB));\n    }\n};\n\"use strict\";\n\n/**\n*\n* A Leaflet Plugin For Editing Geometry Layers in Leaflet 1.0\n* by Sumit Kumar (@TweetsOfSumit)\n* Github Repo: https://github.com/codeofsumit/leaflet.pm\n*/\n\nL.PM = L.PM || {\n    initialize: function initialize() {\n        this.addInitHooks();\n    },\n    addInitHooks: function addInitHooks() {\n        function initLayerGroup() {\n            this.pm = new L.PM.Edit.LayerGroup(this);\n        }\n\n        L.LayerGroup.addInitHook(initLayerGroup);\n\n        function initMarker() {\n            this.pm = new L.PM.Edit.Marker(this);\n        }\n\n        L.Marker.addInitHook(initMarker);\n\n        function initPolygon() {\n            this.pm = new L.PM.Edit.Poly(this);\n        }\n\n        L.Polygon.addInitHook(initPolygon);\n\n        function initPolyline() {\n            this.pm = new L.PM.Edit.Line(this);\n        }\n\n        L.Polyline.addInitHook(initPolyline);\n\n        function initMap() {\n            this.pm = new L.PM.Map(this);\n        }\n\n        L.Map.addInitHook(initMap);\n    }\n};\n\n// initialize leaflet.pm\nL.PM.initialize();\n'use strict';\n\nL.PM.Map = L.Class.extend({\n    initialize: function initialize(map) {\n        this.map = map;\n        this.Draw = new L.PM.Draw(map);\n        this.Toolbar = new L.PM.Toolbar(map);\n    },\n    addControls: function addControls(options) {\n        this.Toolbar.addControls(options);\n    },\n    enableDraw: function enableDraw() {\n        var shape = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Poly';\n        var options = arguments[1];\n\n        this.Draw.enable(shape, options);\n    },\n    disableDraw: function disableDraw() {\n        var shape = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'Poly';\n\n        this.Draw.disable(shape);\n    },\n    setPathOptions: function setPathOptions(options) {\n        this.Draw.setPathOptions(options);\n    },\n    removeLayer: function removeLayer(e) {\n        var layer = e.target;\n        if (!layer._layers && !layer.pm.dragging()) {\n            e.target.remove();\n        }\n    },\n    toggleRemoval: function toggleRemoval(enabled) {\n        var _this = this;\n\n        if (enabled) {\n            this.map.eachLayer(function (layer) {\n                layer.on('click', _this.removeLayer);\n            });\n        } else {\n            this.map.eachLayer(function (layer) {\n                layer.off('click', _this.removeLayer);\n            });\n        }\n    },\n    globalEditEnabled: function globalEditEnabled() {\n        return this._globalEditMode;\n    },\n    toggleGlobalEditMode: function toggleGlobalEditMode(options) {\n        // find all layers that are or inherit from Polylines...\n        var layers = [];\n        this.map.eachLayer(function (layer) {\n            if (layer instanceof L.Polyline || layer instanceof L.Marker) {\n                layers.push(layer);\n            }\n        });\n\n        // filter out layers that don't have the leaflet.pm instance\n        layers = layers.filter(function (layer) {\n            return !!layer.pm;\n        });\n\n        if (this.globalEditEnabled()) {\n            // disable\n\n            this._globalEditMode = false;\n\n            layers.forEach(function (layer) {\n                layer.pm.disable();\n            });\n        } else {\n            // enable\n\n            this._globalEditMode = true;\n\n            layers.forEach(function (layer) {\n                layer.pm.enable(options);\n            });\n        }\n    }\n});\n'use strict';\n\nL.PM.Draw = L.Class.extend({\n    options: {\n        templineStyle: {\n            color: 'red'\n        },\n        hintlineStyle: {\n            color: 'red',\n            dashArray: [5, 5]\n        }\n    },\n    initialize: function initialize(map) {\n        var _this = this;\n\n        // save the map\n        this._map = map;\n\n        // define all possible shapes that can be drawn\n        this.shapes = ['Poly', 'Line', 'Marker'];\n\n        // initiate drawing class for our shapes\n        this.shapes.forEach(function (shape) {\n            _this[shape] = new L.PM.Draw[shape](_this._map);\n        });\n    },\n    setPathOptions: function setPathOptions(options) {\n        this.options.pathOptions = options;\n    },\n    getShapes: function getShapes() {\n        // if somebody wants to know what shapes are available\n        return this.shapes;\n    },\n    enable: function enable(shape, options) {\n        if (!shape) {\n            throw new Error('Error: Please pass a shape as a parameter. Possible shapes are: ' + this.getShapes().join(','));\n        }\n\n        // disable drawing for all shapes\n        this.disable();\n\n        // enable draw for a shape\n        this[shape].enable(options);\n    },\n    disable: function disable() {\n        var _this2 = this;\n\n        // there can only be one drawing mode active at a time on a map\n        // so it doesn't matter which one should be disabled.\n        // just disable all of them\n        this.shapes.forEach(function (shape) {\n            _this2[shape].disable();\n        });\n    },\n    addControls: function addControls() {\n        var _this3 = this;\n\n        // add control buttons for our shapes\n        this.shapes.forEach(function (shape) {\n            _this3[shape].addButton();\n        });\n    }\n});\n\"use strict\";\n\nL.PM.Edit = L.Class.extend({\n    includes: [DragMixin, SnapMixin]\n});\n'use strict';\n\nL.PM.Draw.Line = L.PM.Draw.extend({\n    initialize: function initialize(map) {\n        this._map = map;\n        this._shape = 'Line';\n        this.toolbarButtonName = 'drawPolyline';\n    },\n    enable: function enable(options) {\n        // TODO: Think about if these options could be passed globally for all\n        // instances of L.PM.Draw. So a dev could set drawing style one time as some kind of config\n        L.Util.setOptions(this, options);\n\n        // enable draw mode\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup.addTo(this._map);\n\n        // this is the polyLine that'll make up the polygon\n        this._polyline = L.polyline([], this.options.templineStyle);\n        this._polyline._pmTempLayer = true;\n        this._layerGroup.addLayer(this._polyline);\n\n        // this is the hintline from the mouse cursor to the last marker\n        this._hintline = L.polyline([], this.options.hintlineStyle);\n        this._hintline._pmTempLayer = true;\n        this._layerGroup.addLayer(this._hintline);\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._createPolygonPoint, this);\n\n        // sync the hintline on mousemove\n        this._map.on('mousemove', this._syncHintLine, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n    },\n    disable: function disable() {\n        // disable draw mode\n\n        // cancel, if drawing mode isn't even enabled\n        if (!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._createPolygonPoint, this);\n        this._map.off('mousemove', this._syncHintLine, this);\n\n        // remove layer\n        this._map.removeLayer(this._layerGroup);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got disabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, false);\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    toggle: function toggle(options) {\n        if (this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    _syncHintLine: function _syncHintLine(e) {\n        var polyPoints = this._polyline.getLatLngs();\n\n        if (polyPoints.length > 0) {\n            var lastPolygonPoint = polyPoints[polyPoints.length - 1];\n            this._hintline.setLatLngs([lastPolygonPoint, e.latlng]);\n        }\n    },\n    _createPolygonPoint: function _createPolygonPoint(e) {\n        // is this the first point?\n        var first = this._polyline.getLatLngs().length === 0;\n\n        this._polyline.addLatLng(e.latlng);\n        this._createMarker(e.latlng, first);\n\n        this._hintline.setLatLngs([e.latlng, e.latlng]);\n    },\n    _finishShape: function _finishShape() {\n        // get coordinates, create the leaflet shape and add it to the map\n        var coords = this._polyline.getLatLngs();\n        var polylineLayer = L.polyline(coords, this.options.pathOptions).addTo(this._map);\n\n        // disable drawing\n        this.disable();\n\n        // fire the pm:create event and pass shape and layer\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polylineLayer\n        });\n    },\n    _createMarker: function _createMarker(latlng) {\n        // create the new marker\n        var marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n        marker._pmTempLayer = true;\n\n        // add it to the map\n        this._layerGroup.addLayer(marker);\n\n        // a click on any marker finishes this shape\n        marker.on('click', this._finishShape, this);\n\n        return marker;\n    }\n});\n'use strict';\n\nL.PM.Draw.Marker = L.PM.Draw.extend({\n    initialize: function initialize(map) {\n        this._map = map;\n        this._shape = 'Marker';\n        this.toolbarButtonName = 'drawMarker';\n    },\n    enable: function enable(options) {\n        // TODO: Think about if these options could be passed globally for all\n        // instances of L.PM.Draw. So a dev could set drawing style one time as some kind of config\n        L.Util.setOptions(this, options);\n\n        // change enabled state\n        this._enabled = true;\n\n        // create a marker on click on the map\n        this._map.on('click', this._createMarker, this);\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n\n        // enable edit mode for existing markers\n        this._map.eachLayer(function (layer) {\n            if (layer instanceof L.Marker) {\n                layer.pm.enable();\n            }\n        });\n    },\n    disable: function disable() {\n        // cancel, if drawing mode isn't even enabled\n        if (!this._enabled) {\n            return;\n        }\n\n        // undbind click event, don't create a marker on click anymore\n        this._map.off('click', this._createMarker, this);\n\n        // disable dragging and removing for all markers\n        this._map.eachLayer(function (layer) {\n            if (layer instanceof L.Marker) {\n                layer.pm.disable();\n            }\n        });\n\n        // change enabled state\n        this._enabled = false;\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    toggle: function toggle(options) {\n        if (this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    _createMarker: function _createMarker(e) {\n        // save coords of click\n        var latlng = e.latlng;\n\n        if (!latlng) {\n            return;\n        }\n\n        // create marker\n        var marker = new L.Marker(latlng, {\n            draggable: true\n        });\n\n        // add marker to the map\n        marker.addTo(this._map);\n\n        // enable editing for the marker\n        marker.pm.enable();\n\n        // fire the pm:create event and pass shape and marker\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            marker: marker, // DEPRECATED\n            layer: marker\n        });\n    }\n});\n'use strict';\n\nL.PM.Draw.Poly = L.PM.Draw.Line.extend({\n    initialize: function initialize(map) {\n        this._map = map;\n        this._shape = 'Poly';\n        this.toolbarButtonName = 'drawPolygon';\n    },\n    _finishShape: function _finishShape() {\n        // get coordinates, create the leaflet shape and add it to the map\n        var coords = this._polyline.getLatLngs();\n        var polygonLayer = L.polygon(coords, this.options.pathOptions).addTo(this._map);\n\n        // disable drawing\n        this.disable();\n\n        // fire the pm:create event and pass shape and layer\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polygonLayer\n        });\n    },\n    _createMarker: function _createMarker(latlng, first) {\n        // create the new marker\n        var marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        marker._pmTempLayer = true;\n\n        // add it to the map\n        this._layerGroup.addLayer(marker);\n\n        // if the first marker gets clicked again, finish this shape\n        if (first) {\n            marker.on('click', this._finishShape, this);\n        }\n    }\n});\n'use strict';\n\n// LayerGroup doesn't inherit from L.PM.Edit because it's just calling L.PM.Edit.Poly\n// (which inherits from L.PM.Edit) for each layer,\n// so it's not really a parent class\nL.PM.Edit.LayerGroup = L.Class.extend({\n    initialize: function initialize(layerGroup) {\n        var _this = this;\n\n        this._layerGroup = layerGroup;\n        this._layers = this.findLayers();\n\n        // init all layers of the group\n        this._layers.forEach(function (layer) {\n            return _this._initLayer(layer);\n        });\n\n        // if a new layer is added to the group, reinitialize\n        // This only works for FeatureGroups, not LayerGroups\n        // https://github.com/Leaflet/Leaflet/issues/4861\n        this._layerGroup.on('layeradd', function (e) {\n            _this._layers = _this.findLayers();\n\n            // init the newly added layer\n            if (e.layer.pm) {\n                _this._initLayer(e.layer);\n            }\n\n            // if editing was already enabled for this group, enable it again\n            // so the new layers are enabled\n            if (e.target.pm.enabled()) {\n                _this.enable(_this.getOptions());\n            }\n        });\n    },\n    findLayers: function findLayers() {\n        // get all layers of the layer group\n        var layers = this._layerGroup.getLayers();\n\n        // filter out layers that don't have leaflet.pm\n        layers = layers.filter(function (layer) {\n            return !!layer.pm;\n        });\n\n        // return them\n        return layers;\n    },\n    _initLayer: function _initLayer(layer) {\n        var _this2 = this;\n\n        // available events\n        var availableEvents = ['pm:edit', 'pm:remove', 'pm:dragstart', 'pm:drag', 'pm:dragend', 'pm:snap', 'pm:unsnap', 'pm:raiseMarkers', 'pm:markerdragend', 'pm:markerdragstart'];\n\n        // listen to the events of the layers in this group\n        availableEvents.forEach(function (event) {\n            layer.on(event, _this2._fireEvent, _this2);\n        });\n\n        // add reference for the group to each layer inside said group\n        layer.pm._layerGroup = this._layerGroup;\n    },\n    _fireEvent: function _fireEvent(e) {\n        this._layerGroup.fireEvent(e.type, e);\n    },\n    toggleEdit: function toggleEdit(options) {\n        this._options = options;\n        this._layers.forEach(function (layer) {\n            layer.pm.toggleEdit(options);\n        });\n    },\n    enable: function enable(options) {\n        this._options = options;\n        this._layers.forEach(function (layer) {\n            layer.pm.enable(options);\n        });\n    },\n    disable: function disable() {\n        this._layers.forEach(function (layer) {\n            layer.pm.disable();\n        });\n    },\n    enabled: function enabled() {\n        var enabled = this._layers.find(function (layer) {\n            return layer.pm.enabled();\n        });\n        return !!enabled;\n    },\n    dragging: function dragging() {\n        var dragging = this._layers.find(function (layer) {\n            return layer.pm.dragging();\n        });\n        return !!dragging;\n    },\n    getOptions: function getOptions() {\n        return this._options;\n    }\n});\n'use strict';\n\nL.PM.Edit.Line = L.PM.Edit.extend({\n    initialize: function initialize(layer) {\n        this._layer = layer;\n        this._enabled = false;\n    },\n    toggleEdit: function toggleEdit(options) {\n        if (!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n    enable: function enable() {\n        var _this = this;\n\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n        this.options = options;\n\n        if (!this.enabled()) {\n            // if it was already enabled, disable first\n            // we don't block enabling again because new options might be passed\n            this.disable();\n        }\n\n        // change state\n        this._enabled = true;\n\n        // init markers\n        this._initMarkers();\n\n        // if polygon gets removed from map, disable edit mode\n        this._layer.on('remove', function (e) {\n            _this.disable(e.target);\n        });\n\n        // preventOverlap needs the turf library. If it's not included, deactivate it again\n        // if(window.turf === undefined && this.options.preventOverlap) {\n        //     console.warn('TurfJS not found, preventOverlap is deactivated');\n        //     this.options.preventOverlap = false;\n        // }\n\n        if (this.options.draggable) {\n            this._initDraggableLayer();\n        }\n\n        // if(this.options.preventOverlap) {\n        //\n        //     // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        //     this._layer.on('pm:drag', this._handleOverlap, this);\n        //\n        //     // set new coordinates, more details inside the function\n        //     this._layer.on('pm:dragend', this._applyPossibleCoordsChanges, this);\n        // }\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    disable: function disable() {\n        var poly = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._layer;\n\n        // if it's not enabled, it doesn't need to be disabled\n        if (!this.enabled()) {\n            return false;\n        }\n\n        // prevent disabling if polygon is being dragged\n        if (poly.pm._dragging) {\n            return false;\n        }\n        poly.pm._enabled = false;\n        poly.pm._markerGroup.clearLayers();\n\n        // clean up draggable\n        poly.off('mousedown');\n        poly.off('mouseup');\n\n        // remove draggable class\n        var el = poly._path;\n        L.DomUtil.removeClass(el, 'leaflet-pm-draggable');\n\n        return true;\n    },\n    _initMarkers: function _initMarkers() {\n        var map = this._layer._map;\n\n        // cleanup old ones first\n        if (this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        var coords = this._layer._latlngs;\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for (var k = 0; k < coords.length - 1; k += 1) {\n            var nextIndex = k + 1;\n            this._createMiddleMarker(this._markers[k], this._markers[nextIndex]);\n        }\n\n        if (this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n\n    // creates initial markers for coordinates\n    _createMarker: function _createMarker(latlng, index) {\n        var marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({ className: 'marker-icon' })\n        });\n\n        marker._origLatLng = latlng;\n        marker._index = index;\n        marker._pmTempLayer = true;\n\n        marker.on('dragstart', this._onMarkerDragStart, this);\n        marker.on('drag', this._onMarkerDrag, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n        marker.on('contextmenu', this._removeMarker, this);\n\n        this._markerGroup.addLayer(marker);\n\n        return marker;\n    },\n\n\n    // creates the middle markes between coordinates\n    _createMiddleMarker: function _createMiddleMarker(leftM, rightM) {\n        var _this2 = this;\n\n        var latlng = this._calcMiddleLatLng(leftM.getLatLng(), rightM.getLatLng());\n\n        var middleMarker = this._createMarker(latlng);\n        var middleIcon = L.divIcon({ className: 'marker-icon marker-icon-middle' });\n        middleMarker.setIcon(middleIcon);\n\n        // save reference to this middle markers on the neighboor regular markers\n        leftM._middleMarkerNext = middleMarker;\n        rightM._middleMarkerPrev = middleMarker;\n\n        middleMarker.on('click', function () {\n            // TODO: move the next two lines inside _addMarker() as soon as\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            // is fixed\n            var icon = L.divIcon({ className: 'marker-icon' });\n            middleMarker.setIcon(icon);\n\n            _this2._addMarker(middleMarker, leftM, rightM);\n        });\n        middleMarker.on('movestart', function () {\n            // TODO: This is a workaround. Remove the moveend listener and\n            // callback as soon as this is fixed:\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            middleMarker.on('moveend', function () {\n                var icon = L.divIcon({ className: 'marker-icon' });\n                middleMarker.setIcon(icon);\n\n                middleMarker.off('moveend');\n            });\n\n            _this2._addMarker(middleMarker, leftM, rightM);\n        });\n    },\n\n\n    // adds a new marker from a middlemarker\n    _addMarker: function _addMarker(newM, leftM, rightM) {\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        var latlng = newM.getLatLng();\n        var coords = this._layer._latlngs;\n        var index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map(function (marker, i) {\n            marker._index = i;\n            return true;\n        });\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n\n        if (this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n    _removeMarker: function _removeMarker(e) {\n        var marker = e.target;\n        var coords = this._layer._latlngs;\n        var index = marker._index;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if (index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        coords.splice(index, 1);\n\n        // if the poly has no coordinates left, remove the layer\n        // else, redraw it\n        if (coords.length < 1) {\n            this._layer.remove();\n        } else {\n            this._layer.redraw();\n        }\n\n        // remove the marker and the middlemarkers next to it from the map\n        if (marker._middleMarkerPrev) {\n            this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        }\n        if (marker._middleMarkerNext) {\n            this._markerGroup.removeLayer(marker._middleMarkerNext);\n        }\n\n        this._markerGroup.removeLayer(marker);\n\n        // find neighbor marker-indexes\n        var leftMarkerIndex = index - 1 < 0 ? undefined : index - 1;\n        var rightMarkerIndex = index + 1 >= this._markers.length ? undefined : index + 1;\n\n        // don't create middlemarkers if there is only one marker left\n        // or if the middlemarker would be between the first and last coordinate of a polyline\n        if (rightMarkerIndex && leftMarkerIndex && rightMarkerIndex !== leftMarkerIndex) {\n            var leftM = this._markers[leftMarkerIndex];\n            var rightM = this._markers[rightMarkerIndex];\n            this._createMiddleMarker(leftM, rightM);\n        }\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map(function (m, i) {\n            m._index = i;\n            return true;\n        });\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        // fire edit event\n        this._fireEdit();\n    },\n    _onMarkerDrag: function _onMarkerDrag(e) {\n        // dragged marker\n        var marker = e.target;\n\n        // the dragged markers neighbors\n        var nextMarkerIndex = marker._index + 1 >= this._markers.length ? 0 : marker._index + 1;\n        var prevMarkerIndex = marker._index - 1 < 0 ? this._markers.length - 1 : marker._index - 1;\n\n        // update marker coordinates which will update polygon coordinates\n        L.extend(marker._origLatLng, marker._latlng);\n        this._layer.redraw();\n\n        // update middle markers on the left and right\n        // be aware that \"next\" and \"prev\" might be interchanged, depending on the geojson array\n        var markerLatLng = marker.getLatLng();\n        var prevMarkerLatLng = this._markers[prevMarkerIndex].getLatLng();\n        var nextMarkerLatLng = this._markers[nextMarkerIndex].getLatLng();\n\n        if (marker._middleMarkerNext) {\n            var middleMarkerNextLatLng = this._calcMiddleLatLng(markerLatLng, nextMarkerLatLng);\n            marker._middleMarkerNext.setLatLng(middleMarkerNextLatLng);\n        }\n\n        if (marker._middleMarkerPrev) {\n            var middleMarkerPrevLatLng = this._calcMiddleLatLng(markerLatLng, prevMarkerLatLng);\n            marker._middleMarkerPrev.setLatLng(middleMarkerPrevLatLng);\n        }\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        // }\n    },\n    _onMarkerDragEnd: function _onMarkerDragEnd(e) {\n        // if(this.options.preventOverlap) {\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        this._layer.fire('pm:markerdragend', {\n            markerEvent: e\n        });\n\n        // fire edit event\n        this._fireEdit();\n    },\n    _onMarkerDragStart: function _onMarkerDragStart(e) {\n        this._layer.fire('pm:markerdragstart', {\n            markerEvent: e\n        });\n    },\n    _fireEdit: function _fireEdit() {\n        // fire edit event\n        this._layer.edited = true;\n        this._layer.fire('pm:edit');\n    },\n    _calcMiddleLatLng: function _calcMiddleLatLng(latlng1, latlng2) {\n        // calculate the middle coordinates between two markers\n        // TODO: put this into a utils.js or something\n\n        var map = this._layer._map;\n        var p1 = map.project(latlng1);\n        var p2 = map.project(latlng2);\n\n        var latlng = map.unproject(p1._add(p2)._divideBy(2));\n\n        return latlng;\n    }\n});\n'use strict';\n\nL.PM.Edit.Marker = L.PM.Edit.extend({\n    initialize: function initialize(layer) {\n        // layer is a marker in this case :-)\n        this._layer = layer;\n        this._enabled = false;\n\n        // register dragend event e.g. to fire pm:edit\n        this._layer.on('dragend', this._onDragEnd, this);\n    },\n    toggleEdit: function toggleEdit(options) {\n        if (!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n    enable: function enable() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n            draggable: true,\n            snappable: true\n        };\n\n        this.options = options;\n\n        if (this.enabled()) {\n            return;\n        }\n        this._enabled = true;\n\n        // enable removal for the marker\n        this._layer.on('contextmenu', this._removeMarker, this);\n\n        // enable dragging and removal for the marker\n        if (this.options.snappable) {\n            this._layer.dragging.enable();\n        }\n\n        // enable snapping\n        if (this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n    enabled: function enabled() {\n        return this._enabled;\n    },\n    disable: function disable() {\n        this._enabled = false;\n\n        // disable dragging and removal for the marker\n        this._layer.dragging.disable();\n        this._layer.off('contextmenu', this._removeMarker, this);\n    },\n    _removeMarker: function _removeMarker(e) {\n        var marker = e.target;\n        marker.remove();\n        marker.fire('pm:remove');\n    },\n    _onDragEnd: function _onDragEnd(e) {\n        var marker = e.target;\n\n        // fire the pm:edit event and pass shape and marker\n        marker.fire('pm:edit');\n    },\n\n\n    // overwrite initSnappableMarkers from Snapping.js Mixin\n    _initSnappableMarkers: function _initSnappableMarkers() {\n        var marker = this._layer;\n\n        this.options.snapDistance = this.options.snapDistance || 30;\n\n        marker.off('drag', this._handleSnapping, this);\n        marker.on('drag', this._handleSnapping, this);\n\n        marker.off('dragend', this._cleanupSnapping, this);\n        marker.on('dragend', this._cleanupSnapping, this);\n\n        marker.off('pm:dragstart', this._unsnap, this);\n        marker.on('pm:dragstart', this._unsnap, this);\n    }\n});\n'use strict';\n\nL.PM.Edit.Poly = L.PM.Edit.Line.extend({\n    _initMarkers: function _initMarkers() {\n        var map = this._layer._map;\n\n        // cleanup old ones first\n        if (this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        var coords = this._layer._latlngs[0];\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for (var k = 0; k < coords.length; k += 1) {\n            var nextIndex = k + 1 >= coords.length ? 0 : k + 1;\n            this._createMiddleMarker(this._markers[k], this._markers[nextIndex]);\n        }\n\n        if (this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n\n    // adds a new marker from a middlemarker\n    _addMarker: function _addMarker(newM, leftM, rightM) {\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        var latlng = newM.getLatLng();\n        var coords = this._layer._latlngs[0];\n        var index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map(function (marker, i) {\n            marker._index = i;\n            return true;\n        });\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n\n        if (this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n    _removeMarker: function _removeMarker(e) {\n        var marker = e.target;\n        var coords = this._layer._latlngs[0];\n        var index = marker._index;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if (index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        coords.splice(index, 1);\n\n        // if the poly has no coordinates left, remove the layer\n        // else, redraw it\n        if (coords.length < 1) {\n            this._layer.remove();\n        } else {\n            this._layer.redraw();\n        }\n\n        // remove the marker and the middlemarkers next to it from the map\n        this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        this._markerGroup.removeLayer(marker._middleMarkerNext);\n        this._markerGroup.removeLayer(marker);\n\n        // find neighbor marker-indexes\n        var leftMarkerIndex = index - 1 < 0 ? this._markers.length - 1 : index - 1;\n        var rightMarkerIndex = index + 1 >= this._markers.length ? 0 : index + 1;\n\n        // don't create middlemarkers if there is only one marker left\n        if (rightMarkerIndex !== leftMarkerIndex) {\n            var leftM = this._markers[leftMarkerIndex];\n            var rightM = this._markers[rightMarkerIndex];\n            this._createMiddleMarker(leftM, rightM);\n        }\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map(function (m, i) {\n            m._index = i;\n            return true;\n        });\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        // fire edit event\n        this._fireEdit();\n    }\n});\n'use strict';\n\nL.Control.PMButton = L.Control.extend({\n    options: {\n        position: 'topleft'\n    },\n    // TODO: clean up variable names like _button should be _options and that domNodeVariable stuff\n    initialize: function initialize(options) {\n        this._button = L.Util.setOptions(this, options);\n    },\n    onAdd: function onAdd(map) {\n        this._map = map;\n\n        this._container = this._map.pm.Toolbar.container;\n        this.buttonsDomNode = this._makeButton(this._button);\n        this._container.appendChild(this.buttonsDomNode);\n\n        return this._container;\n    },\n    onRemove: function onRemove() {\n        this.buttonsDomNode.remove();\n\n        return this._container;\n    },\n    getText: function getText() {\n        return this._button.text;\n    },\n    getIconUrl: function getIconUrl() {\n        return this._button.iconUrl;\n    },\n    destroy: function destroy() {\n        this._button = {};\n        this._update();\n    },\n    toggle: function toggle(e) {\n        if (typeof e === 'boolean') {\n            this._button.toggleStatus = e;\n        } else {\n            this._button.toggleStatus = !this._button.toggleStatus;\n        }\n        this._applyStyleClasses();\n\n        return this._button.toggleStatus;\n    },\n    toggled: function toggled() {\n        return this._button.toggleStatus;\n    },\n    onCreate: function onCreate() {\n        this.toggle(false);\n    },\n    _triggerClick: function _triggerClick(e) {\n        this._button.onClick(e);\n        this._clicked(e);\n        this._button.afterClick(e);\n    },\n    _makeButton: function _makeButton(button) {\n        var _this = this;\n\n        var newButton = L.DomUtil.create('a', 'leaflet-buttons-control-button', this._container);\n        if (button.toggleStatus) {\n            L.DomUtil.addClass(newButton, 'active');\n        }\n\n        var image = L.DomUtil.create('div', 'control-icon', newButton);\n        if (button.iconUrl) {\n            image.setAttribute('src', button.iconUrl);\n        }\n        if (button.className) {\n            L.DomUtil.addClass(image, button.className);\n        }\n        // before the actual click, trigger a click on currently toggled buttons to\n        // untoggle them and their functionality\n        L.DomEvent.addListener(newButton, 'click', function () {\n            if (_this._button.disableOtherButtons) {\n                _this._map.pm.Toolbar.triggerClickOnToggledButtons(_this);\n            }\n        });\n        L.DomEvent.addListener(newButton, 'click', this._triggerClick, this);\n\n        L.DomEvent.disableClickPropagation(newButton);\n        return newButton;\n    },\n    _applyStyleClasses: function _applyStyleClasses() {\n        if (!this._container) {\n            return;\n        }\n\n        if (!this._button.toggleStatus) {\n            L.DomUtil.removeClass(this.buttonsDomNode, 'active');\n        } else {\n            L.DomUtil.addClass(this.buttonsDomNode, 'active');\n        }\n    },\n    _clicked: function _clicked() {\n        if (this._button.doToggle) {\n            this.toggle();\n        }\n        return;\n    }\n});\n'use strict';\n\n/**\n* The Icons used in this Toolbar are CC-BY Glyphicons - http://glyphicons.com/\n*/\n\nL.PM.Toolbar = L.Class.extend({\n    options: {\n        drawMarker: true,\n        drawPolygon: true,\n        drawPolyline: true,\n        editPolygon: true,\n        dragPolygon: false,\n        deleteLayer: true,\n        position: 'topleft'\n    },\n    initialize: function initialize(map) {\n        this.map = map;\n\n        this.buttons = {};\n        this.container = L.DomUtil.create('div', 'leaflet-pm-toolbar leaflet-bar leaflet-control');\n        this._defineButtons();\n    },\n    getButtons: function getButtons() {\n        return this.buttons;\n    },\n    addControls: function addControls() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.options;\n\n        // adds all buttons to the map specified inside options\n\n        // first set the options\n        L.Util.setOptions(this, options);\n\n        // now show the specified buttons\n        this._showHideButtons();\n    },\n    _addButton: function _addButton(name, button) {\n        this.buttons[name] = button;\n        this.options[name] = this.options[name] || false;\n\n        return this.buttons[name];\n    },\n    triggerClickOnToggledButtons: function triggerClickOnToggledButtons(exceptThisButton) {\n        // this function is used when - e.g. drawing mode is enabled and a possible\n        // other active mode (like removal tool) is already active.\n        // we can't have two active modes because of possible event conflicts\n        // so, we trigger a click on all currently active (toggled) buttons\n        for (var name in this.buttons) {\n            if (this.buttons[name] !== exceptThisButton && this.buttons[name].toggled()) {\n                this.buttons[name]._triggerClick();\n            }\n        }\n    },\n    toggleButton: function toggleButton(name, status) {\n        // does not fire the events/functionality of the button\n        // this just changes the state and is used if a functionality (like Draw)\n        // is enabled manually via script\n\n        // as some mode got enabled, we still have to trigger the click on the other buttons\n        // to disable their mode\n        this.triggerClickOnToggledButtons(this.buttons[name]);\n\n        // now toggle the state of the button\n        return this.buttons[name].toggle(status);\n    },\n    _defineButtons: function _defineButtons() {\n        var _this = this;\n\n        // some buttons are still in their respective classes, like L.PM.Draw.Poly\n        var deleteButton = {\n            className: 'icon-delete',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                _this.map.pm.toggleRemoval(_this.buttons.deleteLayer.toggled());\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var drawPolyButton = {\n            className: 'icon-polygon',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                // toggle drawing mode\n                _this.map.pm.Draw.Poly.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var drawMarkerButton = {\n            className: 'icon-marker',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                // toggle drawing mode\n                _this.map.pm.Draw.Marker.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var drawLineButton = {\n            className: 'icon-polyline',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                // toggle drawing mode\n                _this.map.pm.Draw.Line.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var editButton = {\n            className: 'icon-edit',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {\n                _this.map.pm.toggleGlobalEditMode({\n                    snappable: true,\n                    draggable: true\n                });\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        var dragButton = {\n            className: 'icon-drag',\n            onClick: function onClick() {},\n            afterClick: function afterClick() {},\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position\n        };\n\n        this._addButton('drawMarker', new L.Control.PMButton(drawMarkerButton));\n        this._addButton('drawPolygon', new L.Control.PMButton(drawPolyButton));\n        this._addButton('drawPolyline', new L.Control.PMButton(drawLineButton));\n        this._addButton('editPolygon', new L.Control.PMButton(editButton));\n        this._addButton('dragPolygon', new L.Control.PMButton(dragButton));\n        this._addButton('deleteLayer', new L.Control.PMButton(deleteButton));\n    },\n    _showHideButtons: function _showHideButtons() {\n        // loop through all buttons\n        var buttons = this.getButtons();\n\n        // remove all buttons, that's because the Toolbar can be added again with\n        // different options so it's basically a reset and add again\n        for (var btn in buttons) {\n            buttons[btn].remove();\n        }\n\n        for (var _btn in buttons) {\n            if (this.options[_btn]) {\n                // if options say the button should be visible, add it to the map\n                buttons[_btn].setPosition(this.options.position);\n                buttons[_btn].addTo(this.map);\n            }\n        }\n    }\n});","const DragMixin = {\n    _initDraggableLayer() {\n        // temporary coord variable for delta calculation\n        this._tempDragCoord = null;\n\n        // add CSS class\n        const el = this._layer._path;\n        L.DomUtil.addClass(el, 'leaflet-pm-draggable');\n\n\n        const onMouseUp = () => {\n            // re-enable map drag\n            this._layer._map.dragging.enable();\n\n            // clear up mousemove event\n            this._layer._map.off('mousemove');\n\n            // clear up mouseup event\n            this._layer.off('mouseup');\n\n            // if no drag happened, don't do anything\n            if(!this._dragging) {\n                return false;\n            }\n\n            // show markers again\n            this._initMarkers();\n\n            // timeout to prevent click event after drag :-/\n            // TODO: do it better as soon as leaflet has a way to do it better :-)\n            window.setTimeout(() => {\n                // set state\n                this._dragging = false;\n                L.DomUtil.removeClass(el, 'leaflet-pm-dragging');\n\n                // fire pm:dragend event\n                this._layer.fire('pm:dragend');\n\n                // fire edit\n                this._fireEdit();\n            }, 10);\n\n            return true;\n        };\n\n        const onMouseMove = (e) => {\n            if(!this._dragging) {\n                // set state\n                this._dragging = true;\n                L.DomUtil.addClass(el, 'leaflet-pm-dragging');\n\n                // bring it to front to prevent drag interception\n                this._layer.bringToFront();\n\n                // disbale map drag\n                this._layer._map.dragging.disable();\n\n                // hide markers\n                this._markerGroup.clearLayers();\n\n                // fire pm:dragstart event\n                this._layer.fire('pm:dragstart');\n            }\n\n            this._onLayerDrag(e);\n        };\n\n        this._layer.on('mousedown', (e) => {\n            // save for delta calculation\n            this._tempDragCoord = e.latlng;\n\n            this._layer.on('mouseup', onMouseUp);\n\n            // listen to mousemove on map (instead of polygon),\n            // otherwise fast mouse movements stop the drag\n            this._layer._map.on('mousemove', onMouseMove);\n        });\n    },\n    dragging() {\n        return this._dragging;\n    },\n\n    _onLayerDrag(e) {\n        // latLng of mouse event\n        const latlng = e.latlng;\n\n        // delta coords (how far was dragged)\n        const deltaLatLng = {\n            lat: latlng.lat - this._tempDragCoord.lat,\n            lng: latlng.lng - this._tempDragCoord.lng,\n        };\n\n        // create the new coordinates array\n        let coords;\n\n        if(this._layer instanceof L.Polygon) {\n            coords = this._layer._latlngs[0];\n        } else {\n            coords = this._layer._latlngs;\n        }\n\n        const newLatLngs = coords.map((currentLatLng) => {\n            return {\n                lat: currentLatLng.lat + deltaLatLng.lat,\n                lng: currentLatLng.lng + deltaLatLng.lng,\n            };\n        });\n\n        // set new coordinates and redraw\n        this._layer.setLatLngs(newLatLngs).redraw();\n\n        // save current latlng for next delta calculation\n        this._tempDragCoord = latlng;\n        this._deltaLatLng = deltaLatLng;\n\n        // fire pm:dragstart event\n        this._layer.fire('pm:drag');\n    },\n};\n","// this isn't included anymore but if you want to re-enable it:\n// 1. include this mixing inside L.PM.Edit.js\n// 2. include the turf.js dependency in your project before leaflet.pm\n// 3. uncomment all code inside L.PM.Edit.Poly that has an if-check on options.preventOverlap\n// 4. pass the option preventOverlap to the enable() function on your layer\nvar OverlapMixin = {\n\n    _applyPossibleCoordsChanges() {\n        // after the polygon was dragged and changed it's shape because of unallowed intersecting\n        // with another polygon, this function takes the temporarily drawn polygon (during drag) and applies\n        // it's coordinates to our main polygon\n\n        if(this._tempPolygon) {\n            // get the new coordinates\n            const latlngs = this._tempPolygon.getLayers()[0].getLatLngs();\n\n            // reshape our main polygon\n            this._poly.setLatLngs(latlngs).redraw();\n\n            // initialize the markers again\n            this._initMarkers();\n        }\n    },\n\n    _drawTemporaryPolygon(geoJson) {\n        // hide our polygon\n        this._poly.setStyle({ opacity: 0, fillOpacity: 0 });\n\n        // draw a temporary polygon (happens during drag & intersection)\n        this._tempPolygon = L.geoJson(geoJson).addTo(this._poly._map).bringToBack();\n    },\n\n    _handleOverlap() {\n        const mainPoly = this._poly;\n        const layers = this._layerGroup.getLayers();\n        let changed = false;\n        let resultingGeoJson = this._poly.toGeoJSON();\n\n        layers\n        .filter(layer => !Object.is(layer, mainPoly))\n        .map((layer) => {\n            let intersect;\n\n            // this needs to be in a try catch block because turf isn't reliable\n            // it throws self-intersection errors even if there are none\n            try {\n                intersect = turf.intersect(resultingGeoJson, layer.toGeoJSON());\n            } catch(e) {\n                console.warn('Turf Error.');\n            }\n\n            if(intersect) {\n                resultingGeoJson = turf.difference(resultingGeoJson, layer.toGeoJSON());\n\n                // if the resulting polygon is a MultiPolygon, don't handle it.\n                if(resultingGeoJson.geometry.type !== 'MultiPolygon') {\n                    changed = true;\n                }\n            }\n\n            return true;\n        });\n\n        if(this._tempPolygon) {\n            this._tempPolygon.remove();\n            delete this._tempPolygon;\n        }\n\n        if(changed) {\n            this._drawTemporaryPolygon(resultingGeoJson);\n        } else {\n            this._poly.setStyle({ opacity: 1, fillOpacity: 0.2 });\n        }\n    },\n};\n","const SnapMixin = {\n    _initSnappableMarkers() {\n        this.options.snapDistance = this.options.snapDistance || 30;\n\n        this._markers.forEach((marker) => {\n            marker.off('drag', this._handleSnapping, this);\n            marker.on('drag', this._handleSnapping, this);\n\n            marker.off('dragend', this._cleanupSnapping, this);\n            marker.on('dragend', this._cleanupSnapping, this);\n        });\n\n\n        this._layer.off('pm:dragstart', this._unsnap, this);\n        this._layer.on('pm:dragstart', this._unsnap, this);\n    },\n\n    _unsnap() {\n        // delete the last snap\n        delete this._snapLatLng;\n    },\n    _cleanupSnapping() {\n        // delete it, we need to refresh this with each start of a drag because\n        // meanwhile, new layers could've been added to the map\n        delete this._snapList;\n\n        this.debugIndicatorLines.forEach((line) => {\n            line.remove();\n        });\n    },\n    _handleSnapping(e) {\n        // if snapping is disabled via holding ALT during drag, stop right here\n        if(e.originalEvent.altKey) {\n            return false;\n        }\n\n        // create a list of polygons that the marker could snap to\n        // this isn't inside a movestart/dragstart callback because middlemarkers are initialized\n        // after dragstart/movestart so it wouldn't fire for them\n        if(this._snapList === undefined) {\n            this._createSnapList(e);\n        }\n\n        // if there are no layers to snap to, stop here\n        if(this._snapList.length <= 0) {\n            return false;\n        }\n\n        const marker = e.target;\n\n        // get the closest layer, it's closest latlng, segment and the distance\n        const closestLayer = this._calcClosestLayer(marker.getLatLng(), this._snapList);\n\n        const isMarker = closestLayer.layer instanceof L.Marker;\n\n        // find the final latlng that we want to snap to\n        let snapLatLng;\n        if(!isMarker) {\n            snapLatLng = this._checkPrioritiySnapping(closestLayer);\n        } else {\n            snapLatLng = closestLayer.latlng;\n        }\n\n        // minimal distance before marker snaps (in pixels)\n        const minDistance = this.options.snapDistance;\n\n        // event info for pm:snap and pm:unsnap\n        const eventInfo = {\n            marker,\n            snapLatLng,\n            segment: closestLayer.segment,\n            layer: this._layer,\n            layerInteractedWith: closestLayer.layer, // for lack of a better property name\n        };\n\n        if(closestLayer.distance < minDistance) {\n            // snap the marker\n            marker.setLatLng(snapLatLng);\n\n            // fire onMarkerDrag for pmEditMarkers (vertex markers on polylines/polygons)\n            // TODO: think about how to move this into L.PM.Edit.Line.js, so Snapping.js is\n            // generic for Edit.Marker and Edit.Line\n            if(!(this._layer instanceof L.Marker)) {\n                this._onMarkerDrag(e);\n            }\n\n            // check if the snapping position differs from the last snap\n            if(this._snapLatLng !== snapLatLng) {\n                // if yes, save it and fire the pm:snap event\n                this._snapLatLng = snapLatLng;\n                marker.fire('pm:snap', eventInfo);\n                this._layer.fire('pm:snap', eventInfo);\n            }\n        } else if(this._snapLatLng) {\n            // no more snapping\n\n            // if it was previously snapped...\n            // ...unsnap\n            this._unsnap(eventInfo);\n\n            // and fire unsnap event\n            eventInfo.marker.fire('pm:unsnap', eventInfo);\n            this._layer.fire('pm:unsnap', eventInfo);\n        }\n\n        return true;\n    },\n\n    // we got the point we want to snap to (C), but we need to check if a coord of the polygon\n    // receives priority over C as the snapping point. Let's check this here\n    _checkPrioritiySnapping(closestLayer) {\n        const map = this._layer._map;\n\n        // A and B are the points of the closest segment to P (the marker position we want to snap)\n        const A = closestLayer.segment[0];\n        const B = closestLayer.segment[1];\n\n        // C is the point we would snap to on the segment.\n        // The closest point on the closest segment of the closest polygon to P. That's right.\n        const C = closestLayer.latlng;\n\n        // distances from A to C and B to C to check which one is closer to C\n        const distanceAC = this._getDistance(map, A, C);\n        const distanceBC = this._getDistance(map, B, C);\n\n        // closest latlng of A and B to C\n        const closestVertexLatLng = distanceAC < distanceBC ? A : B;\n\n        // distance between closestVertexLatLng and C\n        const shortestDistance = distanceAC < distanceBC ? distanceAC : distanceBC;\n\n        // the distance that needs to be undercut to trigger priority\n        const priorityDistance = this.options.snapDistance;\n\n        // the latlng we ultemately want to snap to\n        let snapLatlng;\n\n        // if C is closer to the closestVertexLatLng (A or B) than the snapDistance,\n        // the closestVertexLatLng has priority over C as the snapping point.\n        if(shortestDistance < priorityDistance) {\n            snapLatlng = closestVertexLatLng;\n        } else {\n            snapLatlng = closestLayer.latlng;\n        }\n\n        // return the snapping point\n        return snapLatlng;\n    },\n\n    _createSnapList() {\n        let layers = [];\n        const debugIndicatorLines = [];\n\n        // find all layers that are or inherit from Polylines... and markers that are not\n        // temporary markers of polygon-edits\n        this._layer._map.eachLayer((layer) => {\n            if(layer instanceof L.Polyline || layer instanceof L.Marker) {\n                layers.push(layer);\n\n                // this is for debugging\n                const debugLine = L.polyline([], { color: 'red' });\n                debugIndicatorLines.push(debugLine);\n\n                // uncomment 👇 this line to show helper lines for debugging\n                // debugLine.addTo(this._layer._map);\n            }\n        });\n\n        // ...except myself\n        layers = layers.filter(layer => this._layer !== layer);\n\n        // also remove everything that has no coordinates yet\n        layers = layers.filter(layer => layer._latlng || layer._latlngs.length > 0);\n\n        // finally remove everything that's leaflet.pm specific temporary stuff\n        layers = layers.filter(layer => !layer._pmTempLayer);\n\n        this._snapList = layers;\n        this.debugIndicatorLines = debugIndicatorLines;\n    },\n    _calcClosestLayer(latlng, layers) {\n        // the closest polygon to our dragged marker latlng\n        let closestLayer = {};\n\n        // loop through the layers\n        layers.forEach((layer, index) => {\n            // find the closest latlng, segment and the distance of this layer to the dragged marker latlng\n            const results = this._calcLayerDistances(latlng, layer);\n\n            // show indicator lines, it's for debugging\n            this.debugIndicatorLines[index].setLatLngs([latlng, results.latlng]);\n\n            // save the info if it doesn't exist or if the distance is smaller than the previous one\n            if(closestLayer.distance === undefined || results.distance < closestLayer.distance) {\n                closestLayer = results;\n                closestLayer.layer = layer;\n            }\n        });\n\n        // return the closest layer and it's data\n        // if there is no closest layer, return undefined\n        return closestLayer;\n    },\n\n    _calcLayerDistances(latlng, layer) {\n        const map = this._layer._map;\n\n        // is this a polyline, marker or polygon?\n        const isPolygon = layer instanceof L.Polygon;\n        const isPolyline = !(layer instanceof L.Polygon) && layer instanceof L.Polyline;\n        const isMarker = layer instanceof L.Marker;\n\n        // the point P which we want to snap (probpably the marker that is dragged)\n        const P = latlng;\n\n        let coords;\n\n        // the coords of the layer\n        if(isPolygon) {\n            // polygon\n            coords = layer.getLatLngs()[0];\n        } else if(isPolyline) {\n            // polyline\n            coords = layer.getLatLngs();\n        } else if(isMarker) {\n            // marker\n            coords = layer.getLatLng();\n\n            // return the info for the marker, no more calculations needed\n            return {\n                latlng: coords,\n                distance: this._getDistance(map, coords, P),\n            };\n        }\n\n        // the closest segment (line between two points) of the layer\n        let closestSegment;\n\n        // the shortest distance from P to closestSegment\n        let shortestDistance;\n\n        // loop through the coords of the layer\n        coords.forEach((coord, index) => {\n            // take this coord (A)...\n            const A = coord;\n            let nextIndex;\n\n            // and the next coord (B) as points\n            if(isPolygon) {\n                nextIndex = index + 1 === coords.length ? 0 : index + 1;\n            } else {\n                nextIndex = index + 1 === coords.length ? undefined : index + 1;\n            }\n\n            const B = coords[nextIndex];\n\n            if(B) {\n                // calc the distance between P and AB-segment\n                const distance = this._getDistanceToSegment(map, P, A, B);\n\n                // is the distance shorter than the previous one? Save it and the segment\n                if(shortestDistance === undefined || distance < shortestDistance) {\n                    shortestDistance = distance;\n                    closestSegment = [A, B];\n                }\n            }\n\n            return true;\n        });\n\n        // now, take the closest segment (closestSegment) and calc the closest point to P on it.\n        const C = this._getClosestPointOnSegment(map, latlng, closestSegment[0], closestSegment[1]);\n\n        // return the latlng of that sucker\n        return {\n            latlng: C,\n            segment: closestSegment,\n            distance: shortestDistance,\n        };\n    },\n\n    _getClosestPointOnSegment(map, latlng, latlngA, latlngB) {\n        let maxzoom = map.getMaxZoom();\n        if (maxzoom === Infinity) {\n            maxzoom = map.getZoom();\n        }\n        const P = map.project(latlng, maxzoom);\n        const A = map.project(latlngA, maxzoom);\n        const B = map.project(latlngB, maxzoom);\n        const closest = L.LineUtil.closestPointOnSegment(P, A, B);\n        return map.unproject(closest, maxzoom);\n    },\n    _getDistanceToSegment(map, latlng, latlngA, latlngB) {\n        const P = map.latLngToLayerPoint(latlng);\n        const A = map.latLngToLayerPoint(latlngA);\n        const B = map.latLngToLayerPoint(latlngB);\n        return L.LineUtil.pointToSegmentDistance(P, A, B);\n    },\n    _getDistance(map, latlngA, latlngB) {\n        return map.latLngToLayerPoint(latlngA).distanceTo(map.latLngToLayerPoint(latlngB));\n    },\n};\n","/**\n*\n* A Leaflet Plugin For Editing Geometry Layers in Leaflet 1.0\n* by Sumit Kumar (@TweetsOfSumit)\n* Github Repo: https://github.com/codeofsumit/leaflet.pm\n*/\n\nL.PM = L.PM || {\n    initialize() {\n        this.addInitHooks();\n    },\n    addInitHooks() {\n        function initLayerGroup() {\n            this.pm = new L.PM.Edit.LayerGroup(this);\n        }\n\n        L.LayerGroup.addInitHook(initLayerGroup);\n\n        function initMarker() {\n            this.pm = new L.PM.Edit.Marker(this);\n        }\n\n        L.Marker.addInitHook(initMarker);\n\n\n        function initPolygon() {\n            this.pm = new L.PM.Edit.Poly(this);\n        }\n\n        L.Polygon.addInitHook(initPolygon);\n\n\n        function initPolyline() {\n            this.pm = new L.PM.Edit.Line(this);\n        }\n\n        L.Polyline.addInitHook(initPolyline);\n\n\n        function initMap() {\n            this.pm = new L.PM.Map(this);\n        }\n\n        L.Map.addInitHook(initMap);\n    },\n};\n\n// initialize leaflet.pm\nL.PM.initialize();\n","L.PM.Map = L.Class.extend({\n    initialize(map) {\n        this.map = map;\n        this.Draw = new L.PM.Draw(map);\n        this.Toolbar = new L.PM.Toolbar(map);\n    },\n    addControls(options) {\n        this.Toolbar.addControls(options);\n    },\n    enableDraw(shape = 'Poly', options) {\n        this.Draw.enable(shape, options);\n    },\n    disableDraw(shape = 'Poly') {\n        this.Draw.disable(shape);\n    },\n    setPathOptions(options) {\n        this.Draw.setPathOptions(options);\n    },\n    removeLayer(e) {\n        const layer = e.target;\n        if(!layer._layers && !layer.pm.dragging()) {\n            e.target.remove();\n        }\n    },\n    toggleRemoval(enabled) {\n        if(enabled) {\n            this.map.eachLayer((layer) => {\n                layer.on('click', this.removeLayer);\n            });\n        } else {\n            this.map.eachLayer((layer) => {\n                layer.off('click', this.removeLayer);\n            });\n        }\n    },\n    globalEditEnabled() {\n        return this._globalEditMode;\n    },\n    toggleGlobalEditMode(options) {\n        // find all layers that are or inherit from Polylines...\n        let layers = [];\n        this.map.eachLayer((layer) => {\n            if(layer instanceof L.Polyline || layer instanceof L.Marker) {\n                layers.push(layer);\n            }\n        });\n\n        // filter out layers that don't have the leaflet.pm instance\n        layers = layers.filter(layer => !!layer.pm);\n\n        if(this.globalEditEnabled()) {\n            // disable\n\n            this._globalEditMode = false;\n\n            layers.forEach((layer) => {\n                layer.pm.disable();\n            });\n        } else {\n            // enable\n\n            this._globalEditMode = true;\n\n            layers.forEach((layer) => {\n                layer.pm.enable(options);\n            });\n        }\n    },\n});\n","L.PM.Draw = L.Class.extend({\n    options: {\n        templineStyle: {\n            color: 'red',\n        },\n        hintlineStyle: {\n            color: 'red',\n            dashArray: [5, 5],\n        },\n    },\n    initialize(map) {\n        // save the map\n        this._map = map;\n\n        // define all possible shapes that can be drawn\n        this.shapes = ['Poly', 'Line', 'Marker'];\n\n        // initiate drawing class for our shapes\n        this.shapes.forEach((shape) => {\n            this[shape] = new L.PM.Draw[shape](this._map);\n        });\n    },\n    setPathOptions(options) {\n        this.options.pathOptions = options;\n    },\n    getShapes() {\n        // if somebody wants to know what shapes are available\n        return this.shapes;\n    },\n    enable(shape, options) {\n        if(!shape) {\n            throw new Error(`Error: Please pass a shape as a parameter. Possible shapes are: ${this.getShapes().join(',')}`);\n        }\n\n        // disable drawing for all shapes\n        this.disable();\n\n        // enable draw for a shape\n        this[shape].enable(options);\n    },\n    disable() {\n        // there can only be one drawing mode active at a time on a map\n        // so it doesn't matter which one should be disabled.\n        // just disable all of them\n        this.shapes.forEach((shape) => {\n            this[shape].disable();\n        });\n    },\n    addControls() {\n        // add control buttons for our shapes\n        this.shapes.forEach((shape) => {\n            this[shape].addButton();\n        });\n    },\n});\n","L.PM.Edit = L.Class.extend({\n    includes: [DragMixin, SnapMixin]\n});\n","L.PM.Draw.Line = L.PM.Draw.extend({\n    initialize(map) {\n        this._map = map;\n        this._shape = 'Line';\n        this.toolbarButtonName = 'drawPolyline';\n    },\n    enable(options) {\n        // TODO: Think about if these options could be passed globally for all\n        // instances of L.PM.Draw. So a dev could set drawing style one time as some kind of config\n        L.Util.setOptions(this, options);\n\n        // enable draw mode\n        this._enabled = true;\n\n        // create a new layergroup\n        this._layerGroup = new L.LayerGroup();\n        this._layerGroup.addTo(this._map);\n\n        // this is the polyLine that'll make up the polygon\n        this._polyline = L.polyline([], this.options.templineStyle);\n        this._polyline._pmTempLayer = true;\n        this._layerGroup.addLayer(this._polyline);\n\n        // this is the hintline from the mouse cursor to the last marker\n        this._hintline = L.polyline([], this.options.hintlineStyle);\n        this._hintline._pmTempLayer = true;\n        this._layerGroup.addLayer(this._hintline);\n\n\n        // change map cursor\n        this._map._container.style.cursor = 'crosshair';\n\n        // create a polygon-point on click\n        this._map.on('click', this._createPolygonPoint, this);\n\n        // sync the hintline on mousemove\n        this._map.on('mousemove', this._syncHintLine, this);\n\n        // fire drawstart event\n        this._map.fire('pm:drawstart', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n    },\n    disable() {\n        // disable draw mode\n\n        // cancel, if drawing mode isn't even enabled\n        if(!this._enabled) {\n            return;\n        }\n\n        this._enabled = false;\n\n        // reset cursor\n        this._map._container.style.cursor = 'default';\n\n        // unbind listeners\n        this._map.off('click', this._createPolygonPoint, this);\n        this._map.off('mousemove', this._syncHintLine, this);\n\n        // remove layer\n        this._map.removeLayer(this._layerGroup);\n\n        // fire drawend event\n        this._map.fire('pm:drawend', { shape: this._shape });\n\n        // toggle the draw button of the Toolbar in case drawing mode got disabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, false);\n    },\n    enabled() {\n        return this._enabled;\n    },\n    toggle(options) {\n        if(this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    _syncHintLine(e) {\n        const polyPoints = this._polyline.getLatLngs();\n\n        if(polyPoints.length > 0) {\n            const lastPolygonPoint = polyPoints[polyPoints.length - 1];\n            this._hintline.setLatLngs([lastPolygonPoint, e.latlng]);\n        }\n    },\n    _createPolygonPoint(e) {\n        // is this the first point?\n        const first = this._polyline.getLatLngs().length === 0;\n\n        this._polyline.addLatLng(e.latlng);\n        this._createMarker(e.latlng, first);\n\n\n        this._hintline.setLatLngs([e.latlng, e.latlng]);\n    },\n    _finishShape() {\n        // get coordinates, create the leaflet shape and add it to the map\n        const coords = this._polyline.getLatLngs();\n        const polylineLayer = L.polyline(coords, this.options.pathOptions).addTo(this._map);\n\n        // disable drawing\n        this.disable();\n\n        // fire the pm:create event and pass shape and layer\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polylineLayer,\n        });\n    },\n    _createMarker(latlng) {\n        // create the new marker\n        const marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' }),\n        });\n        marker._pmTempLayer = true;\n\n        // add it to the map\n        this._layerGroup.addLayer(marker);\n\n        // a click on any marker finishes this shape\n        marker.on('click', this._finishShape, this);\n\n        return marker;\n    },\n});\n","L.PM.Draw.Marker = L.PM.Draw.extend({\n    initialize(map) {\n        this._map = map;\n        this._shape = 'Marker';\n        this.toolbarButtonName = 'drawMarker';\n    },\n    enable(options) {\n        // TODO: Think about if these options could be passed globally for all\n        // instances of L.PM.Draw. So a dev could set drawing style one time as some kind of config\n        L.Util.setOptions(this, options);\n\n        // change enabled state\n        this._enabled = true;\n\n        // create a marker on click on the map\n        this._map.on('click', this._createMarker, this);\n\n        // toggle the draw button of the Toolbar in case drawing mode got enabled without the button\n        this._map.pm.Toolbar.toggleButton(this.toolbarButtonName, true);\n\n        // enable edit mode for existing markers\n        this._map.eachLayer((layer) => {\n            if(layer instanceof L.Marker) {\n                layer.pm.enable();\n            }\n        });\n    },\n    disable() {\n        // cancel, if drawing mode isn't even enabled\n        if(!this._enabled) {\n            return;\n        }\n\n        // undbind click event, don't create a marker on click anymore\n        this._map.off('click', this._createMarker, this);\n\n        // disable dragging and removing for all markers\n        this._map.eachLayer((layer) => {\n            if(layer instanceof L.Marker) {\n                layer.pm.disable();\n            }\n        });\n\n        // change enabled state\n        this._enabled = false;\n    },\n    enabled() {\n        return this._enabled;\n    },\n    toggle(options) {\n        if(this.enabled()) {\n            this.disable();\n        } else {\n            this.enable(options);\n        }\n    },\n    _createMarker(e) {\n        // save coords of click\n        const latlng = e.latlng;\n\n        if(!latlng) {\n            return;\n        }\n\n        // create marker\n        const marker = new L.Marker(latlng, {\n            draggable: true,\n        });\n\n        // add marker to the map\n        marker.addTo(this._map);\n\n        // enable editing for the marker\n        marker.pm.enable();\n\n        // fire the pm:create event and pass shape and marker\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            marker,                     // DEPRECATED\n            layer: marker,\n        });\n    },\n});\n","L.PM.Draw.Poly = L.PM.Draw.Line.extend({\n\n    initialize(map) {\n        this._map = map;\n        this._shape = 'Poly';\n        this.toolbarButtonName = 'drawPolygon';\n    },\n    _finishShape() {\n        // get coordinates, create the leaflet shape and add it to the map\n        const coords = this._polyline.getLatLngs();\n        const polygonLayer = L.polygon(coords, this.options.pathOptions).addTo(this._map);\n\n        // disable drawing\n        this.disable();\n\n        // fire the pm:create event and pass shape and layer\n        this._map.fire('pm:create', {\n            shape: this._shape,\n            layer: polygonLayer,\n        });\n    },\n    _createMarker(latlng, first) {\n        // create the new marker\n        const marker = new L.Marker(latlng, {\n            draggable: false,\n            icon: L.divIcon({ className: 'marker-icon' }),\n        });\n\n        marker._pmTempLayer = true;\n\n        // add it to the map\n        this._layerGroup.addLayer(marker);\n\n        // if the first marker gets clicked again, finish this shape\n        if(first) {\n            marker.on('click', this._finishShape, this);\n        }\n    },\n});\n","// LayerGroup doesn't inherit from L.PM.Edit because it's just calling L.PM.Edit.Poly\n// (which inherits from L.PM.Edit) for each layer,\n// so it's not really a parent class\nL.PM.Edit.LayerGroup = L.Class.extend({\n    initialize(layerGroup) {\n        this._layerGroup = layerGroup;\n        this._layers = this.findLayers();\n\n        // init all layers of the group\n        this._layers.forEach(layer => this._initLayer(layer));\n\n        // if a new layer is added to the group, reinitialize\n        // This only works for FeatureGroups, not LayerGroups\n        // https://github.com/Leaflet/Leaflet/issues/4861\n        this._layerGroup.on('layeradd', (e) => {\n            this._layers = this.findLayers();\n\n            // init the newly added layer\n            if(e.layer.pm) {\n                this._initLayer(e.layer);\n            }\n\n            // if editing was already enabled for this group, enable it again\n            // so the new layers are enabled\n            if(e.target.pm.enabled()) {\n                this.enable(this.getOptions());\n            }\n        });\n    },\n    findLayers() {\n        // get all layers of the layer group\n        let layers = this._layerGroup.getLayers();\n\n        // filter out layers that don't have leaflet.pm\n        layers = layers.filter(layer => !!layer.pm);\n\n        // return them\n        return layers;\n    },\n    _initLayer(layer) {\n        // available events\n        const availableEvents = [\n            'pm:edit',\n            'pm:remove',\n            'pm:dragstart',\n            'pm:drag',\n            'pm:dragend',\n            'pm:snap',\n            'pm:unsnap',\n            'pm:raiseMarkers',\n            'pm:markerdragend',\n            'pm:markerdragstart',\n        ];\n\n        // listen to the events of the layers in this group\n        availableEvents.forEach((event) => {\n            layer.on(event, this._fireEvent, this);\n        });\n\n        // add reference for the group to each layer inside said group\n        layer.pm._layerGroup = this._layerGroup;\n    },\n    _fireEvent(e) {\n        this._layerGroup.fireEvent(e.type, e);\n    },\n    toggleEdit(options) {\n        this._options = options;\n        this._layers.forEach((layer) => {\n            layer.pm.toggleEdit(options);\n        });\n    },\n    enable(options) {\n        this._options = options;\n        this._layers.forEach((layer) => {\n            layer.pm.enable(options);\n        });\n    },\n    disable() {\n        this._layers.forEach((layer) => {\n            layer.pm.disable();\n        });\n    },\n    enabled() {\n        const enabled = this._layers.find(layer => layer.pm.enabled());\n        return !!enabled;\n    },\n    dragging() {\n        const dragging = this._layers.find(layer => layer.pm.dragging());\n        return !!dragging;\n    },\n    getOptions() {\n        return this._options;\n    },\n});\n","L.PM.Edit.Line = L.PM.Edit.extend({\n    initialize(layer) {\n        this._layer = layer;\n        this._enabled = false;\n    },\n\n    toggleEdit(options) {\n        if(!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n\n    enable(options = {}) {\n        this.options = options;\n\n        if(!this.enabled()) {\n            // if it was already enabled, disable first\n            // we don't block enabling again because new options might be passed\n            this.disable();\n        }\n\n        // change state\n        this._enabled = true;\n\n        // init markers\n        this._initMarkers();\n\n        // if polygon gets removed from map, disable edit mode\n        this._layer.on('remove', (e) => {\n            this.disable(e.target);\n        });\n\n\n        // preventOverlap needs the turf library. If it's not included, deactivate it again\n        // if(window.turf === undefined && this.options.preventOverlap) {\n        //     console.warn('TurfJS not found, preventOverlap is deactivated');\n        //     this.options.preventOverlap = false;\n        // }\n\n        if(this.options.draggable) {\n            this._initDraggableLayer();\n        }\n\n        // if(this.options.preventOverlap) {\n        //\n        //     // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        //     this._layer.on('pm:drag', this._handleOverlap, this);\n        //\n        //     // set new coordinates, more details inside the function\n        //     this._layer.on('pm:dragend', this._applyPossibleCoordsChanges, this);\n        // }\n    },\n\n    enabled() {\n        return this._enabled;\n    },\n\n    disable(poly = this._layer) {\n        // if it's not enabled, it doesn't need to be disabled\n        if(!this.enabled()) {\n            return false;\n        }\n\n        // prevent disabling if polygon is being dragged\n        if(poly.pm._dragging) {\n            return false;\n        }\n        poly.pm._enabled = false;\n        poly.pm._markerGroup.clearLayers();\n\n        // clean up draggable\n        poly.off('mousedown');\n        poly.off('mouseup');\n\n        // remove draggable class\n        const el = poly._path;\n        L.DomUtil.removeClass(el, 'leaflet-pm-draggable');\n\n        return true;\n    },\n\n    _initMarkers() {\n        const map = this._layer._map;\n\n        // cleanup old ones first\n        if(this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        const coords = this._layer._latlngs;\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for(let k = 0; k < coords.length - 1; k += 1) {\n            const nextIndex = k + 1;\n            this._createMiddleMarker(\n                this._markers[k], this._markers[nextIndex]\n            );\n        }\n\n        if(this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    // creates initial markers for coordinates\n    _createMarker(latlng, index) {\n        const marker = new L.Marker(latlng, {\n            draggable: true,\n            icon: L.divIcon({ className: 'marker-icon' }),\n        });\n\n        marker._origLatLng = latlng;\n        marker._index = index;\n        marker._pmTempLayer = true;\n\n        marker.on('dragstart', this._onMarkerDragStart, this);\n        marker.on('drag', this._onMarkerDrag, this);\n        marker.on('dragend', this._onMarkerDragEnd, this);\n        marker.on('contextmenu', this._removeMarker, this);\n\n        this._markerGroup.addLayer(marker);\n\n        return marker;\n    },\n\n    // creates the middle markes between coordinates\n    _createMiddleMarker(leftM, rightM) {\n        const latlng = this._calcMiddleLatLng(leftM.getLatLng(), rightM.getLatLng());\n\n        const middleMarker = this._createMarker(latlng);\n        const middleIcon = L.divIcon({ className: 'marker-icon marker-icon-middle' });\n        middleMarker.setIcon(middleIcon);\n\n        // save reference to this middle markers on the neighboor regular markers\n        leftM._middleMarkerNext = middleMarker;\n        rightM._middleMarkerPrev = middleMarker;\n\n        middleMarker.on('click', () => {\n            // TODO: move the next two lines inside _addMarker() as soon as\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            // is fixed\n            const icon = L.divIcon({ className: 'marker-icon' });\n            middleMarker.setIcon(icon);\n\n            this._addMarker(middleMarker, leftM, rightM);\n        });\n        middleMarker.on('movestart', () => {\n            // TODO: This is a workaround. Remove the moveend listener and\n            // callback as soon as this is fixed:\n            // https://github.com/Leaflet/Leaflet/issues/4484\n            middleMarker.on('moveend', () => {\n                const icon = L.divIcon({ className: 'marker-icon' });\n                middleMarker.setIcon(icon);\n\n                middleMarker.off('moveend');\n            });\n\n            this._addMarker(middleMarker, leftM, rightM);\n        });\n    },\n\n    // adds a new marker from a middlemarker\n    _addMarker(newM, leftM, rightM) {\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        const latlng = newM.getLatLng();\n        const coords = this._layer._latlngs;\n        const index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map((marker, i) => {\n            marker._index = i;\n            return true;\n        });\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n\n        if(this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    _removeMarker(e) {\n        const marker = e.target;\n        const coords = this._layer._latlngs;\n        const index = marker._index;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if(index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        coords.splice(index, 1);\n\n        // if the poly has no coordinates left, remove the layer\n        // else, redraw it\n        if(coords.length < 1) {\n            this._layer.remove();\n        } else {\n            this._layer.redraw();\n        }\n\n        // remove the marker and the middlemarkers next to it from the map\n        if(marker._middleMarkerPrev) {\n            this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        }\n        if(marker._middleMarkerNext) {\n            this._markerGroup.removeLayer(marker._middleMarkerNext);\n        }\n\n        this._markerGroup.removeLayer(marker);\n\n        // find neighbor marker-indexes\n        const leftMarkerIndex = index - 1 < 0 ? undefined : index - 1;\n        const rightMarkerIndex = index + 1 >= this._markers.length ? undefined : index + 1;\n\n        // don't create middlemarkers if there is only one marker left\n        // or if the middlemarker would be between the first and last coordinate of a polyline\n        if(rightMarkerIndex && leftMarkerIndex && rightMarkerIndex !== leftMarkerIndex) {\n            const leftM = this._markers[leftMarkerIndex];\n            const rightM = this._markers[rightMarkerIndex];\n            this._createMiddleMarker(leftM, rightM);\n        }\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map((m, i) => {\n            m._index = i;\n            return true;\n        });\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        // fire edit event\n        this._fireEdit();\n    },\n\n    _onMarkerDrag(e) {\n        // dragged marker\n        const marker = e.target;\n\n        // the dragged markers neighbors\n        const nextMarkerIndex = marker._index + 1 >= this._markers.length ? 0 : marker._index + 1;\n        const prevMarkerIndex = marker._index - 1 < 0 ? this._markers.length - 1 : marker._index - 1;\n\n        // update marker coordinates which will update polygon coordinates\n        L.extend(marker._origLatLng, marker._latlng);\n        this._layer.redraw();\n\n        // update middle markers on the left and right\n        // be aware that \"next\" and \"prev\" might be interchanged, depending on the geojson array\n        const markerLatLng = marker.getLatLng();\n        const prevMarkerLatLng = this._markers[prevMarkerIndex].getLatLng();\n        const nextMarkerLatLng = this._markers[nextMarkerIndex].getLatLng();\n\n        if(marker._middleMarkerNext) {\n            const middleMarkerNextLatLng = this._calcMiddleLatLng(markerLatLng, nextMarkerLatLng);\n            marker._middleMarkerNext.setLatLng(middleMarkerNextLatLng);\n        }\n\n        if(marker._middleMarkerPrev) {\n            const middleMarkerPrevLatLng = this._calcMiddleLatLng(markerLatLng, prevMarkerLatLng);\n            marker._middleMarkerPrev.setLatLng(middleMarkerPrevLatLng);\n        }\n\n        // if the dragged polygon should be cutted when overlapping another polygon, go ahead\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        // }\n    },\n\n    _onMarkerDragEnd(e) {\n        // if(this.options.preventOverlap) {\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        this._layer.fire('pm:markerdragend', {\n            markerEvent: e,\n        });\n\n        // fire edit event\n        this._fireEdit();\n    },\n    _onMarkerDragStart(e) {\n        this._layer.fire('pm:markerdragstart', {\n            markerEvent: e,\n        });\n    },\n\n    _fireEdit() {\n        // fire edit event\n        this._layer.edited = true;\n        this._layer.fire('pm:edit');\n    },\n\n    _calcMiddleLatLng(latlng1, latlng2) {\n        // calculate the middle coordinates between two markers\n        // TODO: put this into a utils.js or something\n\n        const map = this._layer._map;\n        const p1 = map.project(latlng1);\n        const p2 = map.project(latlng2);\n\n        const latlng = map.unproject(p1._add(p2)._divideBy(2));\n\n        return latlng;\n    },\n});\n","L.PM.Edit.Marker = L.PM.Edit.extend({\n    initialize(layer) {\n        // layer is a marker in this case :-)\n        this._layer = layer;\n        this._enabled = false;\n\n        // register dragend event e.g. to fire pm:edit\n        this._layer.on('dragend', this._onDragEnd, this);\n    },\n\n    toggleEdit(options) {\n        if(!this.enabled()) {\n            this.enable(options);\n        } else {\n            this.disable();\n        }\n    },\n\n    enable(options = {\n        draggable: true,\n        snappable: true,\n    }) {\n        this.options = options;\n\n        if(this.enabled()) {\n            return;\n        }\n        this._enabled = true;\n\n\n        // enable removal for the marker\n        this._layer.on('contextmenu', this._removeMarker, this);\n\n        // enable dragging and removal for the marker\n        if(this.options.snappable) {\n            this._layer.dragging.enable();\n        }\n\n        // enable snapping\n        if(this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    enabled() {\n        return this._enabled;\n    },\n\n    disable() {\n        this._enabled = false;\n\n        // disable dragging and removal for the marker\n        this._layer.dragging.disable();\n        this._layer.off('contextmenu', this._removeMarker, this);\n    },\n    _removeMarker(e) {\n        const marker = e.target;\n        marker.remove();\n        marker.fire('pm:remove');\n    },\n    _onDragEnd(e) {\n        const marker = e.target;\n\n        // fire the pm:edit event and pass shape and marker\n        marker.fire('pm:edit');\n    },\n\n    // overwrite initSnappableMarkers from Snapping.js Mixin\n    _initSnappableMarkers() {\n        const marker = this._layer;\n\n        this.options.snapDistance = this.options.snapDistance || 30;\n\n        marker.off('drag', this._handleSnapping, this);\n        marker.on('drag', this._handleSnapping, this);\n\n        marker.off('dragend', this._cleanupSnapping, this);\n        marker.on('dragend', this._cleanupSnapping, this);\n\n        marker.off('pm:dragstart', this._unsnap, this);\n        marker.on('pm:dragstart', this._unsnap, this);\n    },\n});\n","L.PM.Edit.Poly = L.PM.Edit.Line.extend({\n\n    _initMarkers() {\n        const map = this._layer._map;\n\n        // cleanup old ones first\n        if(this._markerGroup) {\n            this._markerGroup.clearLayers();\n        }\n\n        // add markerGroup to map, markerGroup includes regular and middle markers\n        this._markerGroup = new L.LayerGroup();\n        map.addLayer(this._markerGroup);\n\n        // create marker for each coordinate\n        const coords = this._layer._latlngs[0];\n\n        // the marker array, it includes only the markers that're associated with the coordinates\n        this._markers = coords.map(this._createMarker, this);\n\n        // create small markers in the middle of the regular markers\n        for(let k = 0; k < coords.length; k += 1) {\n            const nextIndex = k + 1 >= coords.length ? 0 : k + 1;\n            this._createMiddleMarker(\n                this._markers[k], this._markers[nextIndex]\n            );\n        }\n\n        if(this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    // adds a new marker from a middlemarker\n    _addMarker(newM, leftM, rightM) {\n        // first, make this middlemarker a regular marker\n        newM.off('movestart');\n        newM.off('click');\n\n        // now, create the polygon coordinate point for that marker\n        const latlng = newM.getLatLng();\n        const coords = this._layer._latlngs[0];\n        const index = leftM._index + 1;\n\n        coords.splice(index, 0, latlng);\n\n        // associate polygon coordinate with marker coordinate\n        newM._origLatLng = coords[index];\n\n        // push into marker array & update the indexes for every marker\n        this._markers.splice(index, 0, newM);\n        this._markers.map((marker, i) => {\n            marker._index = i;\n            return true;\n        });\n\n        // create the new middlemarkers\n        this._createMiddleMarker(leftM, newM);\n        this._createMiddleMarker(newM, rightM);\n\n        // fire edit event\n        this._fireEdit();\n\n        if(this.options.snappable) {\n            this._initSnappableMarkers();\n        }\n    },\n\n    _removeMarker(e) {\n        const marker = e.target;\n        const coords = this._layer._latlngs[0];\n        const index = marker._index;\n\n        // only continue if this is NOT a middle marker (those can't be deleted)\n        if(index === undefined) {\n            return;\n        }\n\n        // remove polygon coordinate from this marker\n        coords.splice(index, 1);\n\n        // if the poly has no coordinates left, remove the layer\n        // else, redraw it\n        if(coords.length < 1) {\n            this._layer.remove();\n        } else {\n            this._layer.redraw();\n        }\n\n        // remove the marker and the middlemarkers next to it from the map\n        this._markerGroup.removeLayer(marker._middleMarkerPrev);\n        this._markerGroup.removeLayer(marker._middleMarkerNext);\n        this._markerGroup.removeLayer(marker);\n\n        // find neighbor marker-indexes\n        const leftMarkerIndex = index - 1 < 0 ? this._markers.length - 1 : index - 1;\n        const rightMarkerIndex = index + 1 >= this._markers.length ? 0 : index + 1;\n\n        // don't create middlemarkers if there is only one marker left\n        if(rightMarkerIndex !== leftMarkerIndex) {\n            const leftM = this._markers[leftMarkerIndex];\n            const rightM = this._markers[rightMarkerIndex];\n            this._createMiddleMarker(leftM, rightM);\n        }\n\n        // remove the marker from the markers array & update indexes\n        this._markers.splice(index, 1);\n        this._markers.map((m, i) => {\n            m._index = i;\n            return true;\n        });\n\n        // if the polygon should be cutted when overlapping another polygon, do it now\n        // if(this.options.preventOverlap) {\n        //     this._handleOverlap();\n        //     this._applyPossibleCoordsChanges();\n        // }\n\n        // fire edit event\n        this._fireEdit();\n    },\n});\n","L.Control.PMButton = L.Control.extend({\n    options: {\n        position: 'topleft',\n    },\n    // TODO: clean up variable names like _button should be _options and that domNodeVariable stuff\n    initialize(options) {\n        this._button = L.Util.setOptions(this, options);\n    },\n\n    onAdd(map) {\n        this._map = map;\n\n        this._container = this._map.pm.Toolbar.container;\n        this.buttonsDomNode = this._makeButton(this._button);\n        this._container.appendChild(this.buttonsDomNode);\n\n        return this._container;\n    },\n\n    onRemove() {\n        this.buttonsDomNode.remove();\n\n        return this._container;\n    },\n\n    getText() {\n        return this._button.text;\n    },\n\n    getIconUrl() {\n        return this._button.iconUrl;\n    },\n\n    destroy() {\n        this._button = {};\n        this._update();\n    },\n\n    toggle(e) {\n        if(typeof e === 'boolean') {\n            this._button.toggleStatus = e;\n        } else {\n            this._button.toggleStatus = !this._button.toggleStatus;\n        }\n        this._applyStyleClasses();\n\n        return this._button.toggleStatus;\n    },\n    toggled() {\n        return this._button.toggleStatus;\n    },\n    onCreate() {\n        this.toggle(false);\n    },\n    _triggerClick(e) {\n        this._button.onClick(e);\n        this._clicked(e);\n        this._button.afterClick(e);\n    },\n    _makeButton(button) {\n        const newButton = L.DomUtil.create('a', 'leaflet-buttons-control-button', this._container);\n        if(button.toggleStatus) {\n            L.DomUtil.addClass(newButton, 'active');\n        }\n\n        const image = L.DomUtil.create('div', 'control-icon', newButton);\n        if (button.iconUrl) {\n            image.setAttribute('src', button.iconUrl);\n        }\n        if (button.className) {\n            L.DomUtil.addClass(image, button.className);\n        }\n        // before the actual click, trigger a click on currently toggled buttons to\n        // untoggle them and their functionality\n        L.DomEvent.addListener(newButton, 'click', () => {\n            if(this._button.disableOtherButtons) {\n                this._map.pm.Toolbar.triggerClickOnToggledButtons(this);\n            }\n        });\n        L.DomEvent.addListener(newButton, 'click', this._triggerClick, this);\n\n        L.DomEvent.disableClickPropagation(newButton);\n        return newButton;\n    },\n\n    _applyStyleClasses() {\n        if(!this._container) {\n            return;\n        }\n\n        if(!this._button.toggleStatus) {\n            L.DomUtil.removeClass(this.buttonsDomNode, 'active');\n        } else {\n            L.DomUtil.addClass(this.buttonsDomNode, 'active');\n        }\n    },\n\n    _clicked() {\n        if(this._button.doToggle) {\n            this.toggle();\n        }\n        return;\n    },\n\n});\n","/**\n* The Icons used in this Toolbar are CC-BY Glyphicons - http://glyphicons.com/\n*/\n\nL.PM.Toolbar = L.Class.extend({\n    options: {\n        drawMarker: true,\n        drawPolygon: true,\n        drawPolyline: true,\n        editPolygon: true,\n        dragPolygon: false,\n        deleteLayer: true,\n        position: 'topleft',\n    },\n    initialize(map) {\n        this.map = map;\n\n        this.buttons = {};\n        this.container = L.DomUtil.create('div', 'leaflet-pm-toolbar leaflet-bar leaflet-control');\n        this._defineButtons();\n    },\n    getButtons() {\n        return this.buttons;\n    },\n\n    addControls(options = this.options) {\n        // adds all buttons to the map specified inside options\n\n        // first set the options\n        L.Util.setOptions(this, options);\n\n        // now show the specified buttons\n        this._showHideButtons();\n    },\n    _addButton(name, button) {\n        this.buttons[name] = button;\n        this.options[name] = this.options[name] || false;\n\n        return this.buttons[name];\n    },\n    triggerClickOnToggledButtons(exceptThisButton) {\n        // this function is used when - e.g. drawing mode is enabled and a possible\n        // other active mode (like removal tool) is already active.\n        // we can't have two active modes because of possible event conflicts\n        // so, we trigger a click on all currently active (toggled) buttons\n        for (const name in this.buttons) {\n            if(this.buttons[name] !== exceptThisButton && this.buttons[name].toggled()) {\n                this.buttons[name]._triggerClick();\n            }\n        }\n    },\n    toggleButton(name, status) {\n        // does not fire the events/functionality of the button\n        // this just changes the state and is used if a functionality (like Draw)\n        // is enabled manually via script\n\n        // as some mode got enabled, we still have to trigger the click on the other buttons\n        // to disable their mode\n        this.triggerClickOnToggledButtons(this.buttons[name]);\n\n        // now toggle the state of the button\n        return this.buttons[name].toggle(status);\n    },\n    _defineButtons() {\n        // some buttons are still in their respective classes, like L.PM.Draw.Poly\n        const deleteButton = {\n            className: 'icon-delete',\n            onClick: () => {\n\n            },\n            afterClick: () => {\n                this.map.pm.toggleRemoval(this.buttons.deleteLayer.toggled());\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        const drawPolyButton = {\n            className: 'icon-polygon',\n            onClick: () => {\n\n            },\n            afterClick: () => {\n                // toggle drawing mode\n                this.map.pm.Draw.Poly.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        const drawMarkerButton = {\n            className: 'icon-marker',\n            onClick: () => {\n\n            },\n            afterClick: () => {\n                // toggle drawing mode\n                this.map.pm.Draw.Marker.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        const drawLineButton = {\n            className: 'icon-polyline',\n            onClick: () => {\n\n            },\n            afterClick: () => {\n                // toggle drawing mode\n                this.map.pm.Draw.Line.toggle();\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        const editButton = {\n            className: 'icon-edit',\n            onClick: () => {\n            },\n            afterClick: () => {\n                this.map.pm.toggleGlobalEditMode({\n                    snappable: true,\n                    draggable: true,\n                });\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        const dragButton = {\n            className: 'icon-drag',\n            onClick: () => {\n            },\n            afterClick: () => {\n\n            },\n            doToggle: true,\n            toggleStatus: false,\n            disableOtherButtons: true,\n            position: this.options.position,\n        };\n\n        this._addButton('drawMarker', new L.Control.PMButton(drawMarkerButton));\n        this._addButton('drawPolygon', new L.Control.PMButton(drawPolyButton));\n        this._addButton('drawPolyline', new L.Control.PMButton(drawLineButton));\n        this._addButton('editPolygon', new L.Control.PMButton(editButton));\n        this._addButton('dragPolygon', new L.Control.PMButton(dragButton));\n        this._addButton('deleteLayer', new L.Control.PMButton(deleteButton));\n    },\n\n    _showHideButtons() {\n        // loop through all buttons\n        const buttons = this.getButtons();\n\n        // remove all buttons, that's because the Toolbar can be added again with\n        // different options so it's basically a reset and add again\n        for (const btn in buttons) {\n            buttons[btn].remove();\n        }\n\n        for (const btn in buttons) {\n            if(this.options[btn]) {\n                // if options say the button should be visible, add it to the map\n                buttons[btn].setPosition(this.options.position);\n                buttons[btn].addTo(this.map);\n            }\n        }\n    },\n});\n"]}